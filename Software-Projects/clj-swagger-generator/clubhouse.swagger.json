{
   "consumes": [
      "application/json"
   ],
   "definitions": {
      "BasicWorkspaceInfo": {
         "additionalProperties": false,
         "properties": {
            "estimate_scale": {
               "items": {
                  "format": "int64",
                  "type": "integer"
               },
               "type": "array"
            },
            "url_slug": {
               "type": "string"
            }
         },
         "required": [
            "estimate_scale",
            "url_slug"
         ],
         "type": "object"
      },
      "Branch": {
         "additionalProperties": false,
         "description": "Branch refers to a GitHub branch. Branches are feature branches associated with Clubhouse Stories.",
         "properties": {
            "created_at": {
               "description": "The time/date the Branch was created.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "deleted": {
               "description": "A true/false boolean indicating if the Branch has been deleted.",
               "type": "boolean"
            },
            "entity_type": {
               "description": "A string description of this resource.",
               "type": "string"
            },
            "id": {
               "description": "The unique ID of the Branch.",
               "format": "int64",
               "type": "integer",
               "x-nullable": true
            },
            "merged_branch_ids": {
               "description": "The IDs of the Branches the Branch has been merged into.",
               "items": {
                  "format": "int64",
                  "type": "integer"
               },
               "type": "array"
            },
            "name": {
               "description": "The name of the Branch.",
               "type": "string"
            },
            "persistent": {
               "description": "A true/false boolean indicating if the Branch is persistent; e.g. master.",
               "type": "boolean"
            },
            "pull_requests": {
               "description": "An array of PullRequests attached to the Branch (there is usually only one).",
               "items": {
                  "$ref": "#/definitions/PullRequest"
               },
               "type": "array"
            },
            "repository_id": {
               "description": "The ID of the Repository that contains the Branch.",
               "format": "int64",
               "type": "integer",
               "x-nullable": true
            },
            "updated_at": {
               "description": "The time/date the Branch was updated.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "url": {
               "description": "The URL of the Branch.",
               "type": "string"
            }
         },
         "required": [
            "created_at",
            "deleted",
            "entity_type",
            "id",
            "merged_branch_ids",
            "name",
            "persistent",
            "pull_requests",
            "repository_id",
            "updated_at",
            "url"
         ],
         "type": "object"
      },
      "Category": {
         "additionalProperties": false,
         "description": "A Category can be used to associate Milestones.",
         "properties": {
            "archived": {
               "description": "A true/false boolean indicating if the Category has been archived.",
               "type": "boolean"
            },
            "color": {
               "description": "The hex color to be displayed with the Category (for example, \"#ff0000\").",
               "type": "string",
               "x-nullable": true
            },
            "created_at": {
               "description": "The time/date that the Category was created.",
               "format": "date-time",
               "type": "string"
            },
            "entity_type": {
               "description": "A string description of this resource.",
               "type": "string"
            },
            "external_id": {
               "description": "This field can be set to another unique ID. In the case that the Category has been imported from another tool, the ID in the other tool can be indicated here.",
               "type": "string",
               "x-nullable": true
            },
            "id": {
               "description": "The unique ID of the Category.",
               "format": "int64",
               "type": "integer"
            },
            "name": {
               "description": "The name of the Category.",
               "type": "string"
            },
            "type": {
               "description": "The type of entity this Category is associated with; currently Milestone is the only type of Category.",
               "type": "string"
            },
            "updated_at": {
               "description": "The time/date that the Category was updated.",
               "format": "date-time",
               "type": "string"
            }
         },
         "required": [
            "archived",
            "color",
            "created_at",
            "entity_type",
            "external_id",
            "id",
            "name",
            "type",
            "updated_at"
         ],
         "type": "object"
      },
      "Comment": {
         "additionalProperties": false,
         "description": "A Comment is any note added within the Comment field of a Story.",
         "properties": {
            "app_url": {
               "description": "The Clubhouse application url for the Comment.",
               "type": "string"
            },
            "author_id": {
               "description": "The unique ID of the Member who is the Comment's author.",
               "format": "uuid",
               "type": "string",
               "x-nullable": true
            },
            "created_at": {
               "description": "The time/date when the Comment was created.",
               "format": "date-time",
               "type": "string"
            },
            "entity_type": {
               "description": "A string description of this resource.",
               "type": "string"
            },
            "external_id": {
               "description": "This field can be set to another unique ID. In the case that the Comment has been imported from another tool, the ID in the other tool can be indicated here.",
               "type": "string",
               "x-nullable": true
            },
            "group_mention_ids": {
               "description": "The unique IDs of the Group who are mentioned in the Comment.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "id": {
               "description": "The unique ID of the Comment.",
               "format": "int64",
               "type": "integer"
            },
            "member_mention_ids": {
               "description": "The unique IDs of the Member who are mentioned in the Comment.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "mention_ids": {
               "description": "Deprecated: use member_mention_ids.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "position": {
               "description": "The Comments numerical position in the list from oldest to newest.",
               "format": "int64",
               "type": "integer"
            },
            "reactions": {
               "description": "A set of Reactions to this Comment.",
               "items": {
                  "$ref": "#/definitions/Reaction"
               },
               "type": "array",
               "x-doc-skip": true
            },
            "story_id": {
               "description": "The ID of the Story on which the Comment appears.",
               "format": "int64",
               "type": "integer"
            },
            "text": {
               "description": "The text of the Comment.",
               "type": "string"
            },
            "updated_at": {
               "description": "The time/date when the Comment was updated.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            }
         },
         "required": [
            "app_url",
            "author_id",
            "created_at",
            "entity_type",
            "external_id",
            "group_mention_ids",
            "id",
            "member_mention_ids",
            "mention_ids",
            "position",
            "reactions",
            "story_id",
            "text",
            "updated_at"
         ],
         "type": "object"
      },
      "Commit": {
         "additionalProperties": false,
         "description": "Commit refers to a GitHub commit and all associated details.",
         "properties": {
            "author_email": {
               "description": "The email address of the GitHub user that authored the Commit.",
               "type": "string"
            },
            "author_id": {
               "description": "The ID of the Member that authored the Commit, if known.",
               "format": "uuid",
               "type": "string",
               "x-nullable": true
            },
            "author_identity": {
               "$ref": "#/definitions/Identity"
            },
            "created_at": {
               "description": "The time/date the Commit was created.",
               "format": "date-time",
               "type": "string"
            },
            "entity_type": {
               "description": "A string description of this resource.",
               "type": "string"
            },
            "hash": {
               "description": "The Commit hash.",
               "type": "string"
            },
            "id": {
               "description": "The unique ID of the Commit.",
               "format": "int64",
               "type": "integer",
               "x-nullable": true
            },
            "merged_branch_ids": {
               "description": "The IDs of the Branches the Commit has been merged into.",
               "items": {
                  "format": "int64",
                  "type": "integer"
               },
               "type": "array"
            },
            "message": {
               "description": "The Commit message.",
               "type": "string"
            },
            "repository_id": {
               "description": "The ID of the Repository that contains the Commit.",
               "format": "int64",
               "type": "integer",
               "x-nullable": true
            },
            "timestamp": {
               "description": "The time/date the Commit was pushed.",
               "format": "date-time",
               "type": "string"
            },
            "updated_at": {
               "description": "The time/date the Commit was updated.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "url": {
               "description": "The URL of the Commit.",
               "type": "string"
            }
         },
         "required": [
            "author_email",
            "author_id",
            "author_identity",
            "created_at",
            "entity_type",
            "hash",
            "id",
            "merged_branch_ids",
            "message",
            "repository_id",
            "timestamp",
            "updated_at",
            "url"
         ],
         "type": "object"
      },
      "CreateCategory": {
         "additionalProperties": false,
         "properties": {
            "color": {
               "description": "The hex color to be displayed with the Category (for example, \"#ff0000\").",
               "type": "string"
            },
            "external_id": {
               "description": "This field can be set to another unique ID. In the case that the Category has been imported from another tool, the ID in the other tool can be indicated here.",
               "type": "string"
            },
            "name": {
               "description": "The name of the new Category.",
               "type": "string"
            },
            "type": {
               "description": "The type of entity this Category is associated with; currently Milestone is the only type of Category.",
               "enum": [
                  "milestone"
               ],
               "type": "string"
            }
         },
         "required": [
            "name",
            "type"
         ],
         "type": "object",
         "x-doc-skip": true
      },
      "CreateCategoryParams": {
         "additionalProperties": false,
         "description": "Request parameters for creating a Category with a Milestone.",
         "properties": {
            "color": {
               "description": "The hex color to be displayed with the Category (for example, \"#ff0000\").",
               "type": "string"
            },
            "external_id": {
               "description": "This field can be set to another unique ID. In the case that the Category has been imported from another tool, the ID in the other tool can be indicated here.",
               "type": "string"
            },
            "name": {
               "description": "The name of the new Category.",
               "type": "string"
            }
         },
         "required": [
            "name"
         ],
         "type": "object"
      },
      "CreateComment": {
         "additionalProperties": false,
         "properties": {
            "author_id": {
               "description": "The Member ID of the Comment's author. Defaults to the user identified by the API token.",
               "format": "uuid",
               "type": "string"
            },
            "created_at": {
               "description": "Defaults to the time/date the comment is created, but can be set to reflect another date.",
               "format": "date-time",
               "type": "string"
            },
            "external_id": {
               "description": "This field can be set to another unique ID. In the case that the comment has been imported from another tool, the ID in the other tool can be indicated here.",
               "type": "string"
            },
            "text": {
               "description": "The comment text.",
               "type": "string"
            },
            "updated_at": {
               "description": "Defaults to the time/date the comment is last updated, but can be set to reflect another date.",
               "format": "date-time",
               "type": "string"
            }
         },
         "required": [
            "text"
         ],
         "type": "object",
         "x-doc-skip": true
      },
      "CreateCommentComment": {
         "additionalProperties": false,
         "properties": {
            "author_id": {
               "description": "The Member ID of the Comment's author. Defaults to the user identified by the API token.",
               "format": "uuid",
               "type": "string"
            },
            "created_at": {
               "description": "Defaults to the time/date the comment is created, but can be set to reflect another date.",
               "format": "date-time",
               "type": "string"
            },
            "external_id": {
               "description": "This field can be set to another unique ID. In the case that the comment has been imported from another tool, the ID in the other tool can be indicated here.",
               "type": "string"
            },
            "text": {
               "description": "The comment text.",
               "type": "string"
            },
            "updated_at": {
               "description": "Defaults to the time/date the comment is last updated, but can be set to reflect another date.",
               "format": "date-time",
               "type": "string"
            }
         },
         "required": [
            "text"
         ],
         "type": "object",
         "x-doc-skip": true
      },
      "CreateEntityTemplate": {
         "additionalProperties": false,
         "description": "Request paramaters for creating an entirely new entity template.",
         "properties": {
            "author_id": {
               "description": "The id of the user creating this template.",
               "format": "uuid",
               "type": "string"
            },
            "name": {
               "description": "The name of the new entity template",
               "type": "string"
            },
            "story_contents": {
               "$ref": "#/definitions/CreateStoryContents"
            }
         },
         "required": [
            "name",
            "story_contents"
         ],
         "type": "object"
      },
      "CreateEntityTemplateExternalTicket": {
         "additionalProperties": false,
         "properties": {
            "external_id": {
               "description": "The id of the ticket in the external system.",
               "type": "string"
            },
            "external_url": {
               "description": "The url for the ticket in the external system.",
               "type": "string"
            }
         },
         "required": [
            "external_id"
         ],
         "type": "object"
      },
      "CreateEpic": {
         "additionalProperties": false,
         "properties": {
            "completed_at_override": {
               "description": "A manual override for the time/date the Epic was completed.",
               "format": "date-time",
               "type": "string"
            },
            "created_at": {
               "description": "Defaults to the time/date it is created but can be set to reflect another date.",
               "format": "date-time",
               "type": "string"
            },
            "deadline": {
               "description": "The Epic's deadline.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "description": {
               "description": "The Epic's description.",
               "type": "string"
            },
            "epic_state_id": {
               "description": "The ID of the Epic State.",
               "format": "int64",
               "type": "integer"
            },
            "external_id": {
               "description": "This field can be set to another unique ID. In the case that the Epic has been imported from another tool, the ID in the other tool can be indicated here.",
               "type": "string"
            },
            "follower_ids": {
               "description": "An array of UUIDs for any Members you want to add as Followers on this new Epic.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "labels": {
               "description": "An array of Labels attached to the Epic.",
               "items": {
                  "$ref": "#/definitions/CreateLabelParams"
               },
               "type": "array"
            },
            "milestone_id": {
               "description": "The ID of the Milestone this Epic is related to.",
               "format": "int64",
               "type": "integer",
               "x-nullable": true
            },
            "name": {
               "description": "The Epic's name.",
               "type": "string"
            },
            "owner_ids": {
               "description": "An array of UUIDs for any members you want to add as Owners on this new Epic.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "requested_by_id": {
               "description": "The ID of the member that requested the epic.",
               "format": "uuid",
               "type": "string"
            },
            "started_at_override": {
               "description": "A manual override for the time/date the Epic was started.",
               "format": "date-time",
               "type": "string"
            },
            "state": {
               "description": "`Deprecated` The Epic's state (to do, in progress, or done); will be ignored when `epic_state_id` is set.",
               "enum": [
                  "done",
                  "in progress",
                  "to do"
               ],
               "type": "string"
            },
            "updated_at": {
               "description": "Defaults to the time/date it is created but can be set to reflect another date.",
               "format": "date-time",
               "type": "string"
            }
         },
         "required": [
            "name"
         ],
         "type": "object",
         "x-doc-skip": true
      },
      "CreateEpicComment": {
         "additionalProperties": false,
         "properties": {
            "author_id": {
               "description": "The Member ID of the Comment's author. Defaults to the user identified by the API token.",
               "format": "uuid",
               "type": "string"
            },
            "created_at": {
               "description": "Defaults to the time/date the comment is created, but can be set to reflect another date.",
               "format": "date-time",
               "type": "string"
            },
            "external_id": {
               "description": "This field can be set to another unique ID. In the case that the comment has been imported from another tool, the ID in the other tool can be indicated here.",
               "type": "string"
            },
            "text": {
               "description": "The comment text.",
               "type": "string"
            },
            "updated_at": {
               "description": "Defaults to the time/date the comment is last updated, but can be set to reflect another date.",
               "format": "date-time",
               "type": "string"
            }
         },
         "required": [
            "text"
         ],
         "type": "object",
         "x-doc-skip": true
      },
      "CreateExternalTicketParams": {
         "additionalProperties": false,
         "properties": {
            "external_id": {
               "description": "The id of the ticket in the external system.",
               "type": "string"
            },
            "external_url": {
               "description": "The url for the ticket in the external system.",
               "type": "string"
            }
         },
         "required": [
            "external_id"
         ],
         "type": "object"
      },
      "CreateFileObj": {
         "additionalProperties": false,
         "properties": {
            "content-type": {
               "type": "string"
            },
            "filename": {
               "type": "string"
            },
            "size": {
               "format": "int64",
               "type": "integer"
            },
            "tempfile": {
               "type": "file"
            }
         },
         "required": [
            "content-type",
            "filename",
            "size",
            "tempfile"
         ],
         "type": "object",
         "x-doc-skip": true
      },
      "CreateFiles": {
         "additionalProperties": {
            "$ref": "#/definitions/CreateFileObj"
         },
         "properties": {
            "story_id": {
               "description": "The story ID that this file will be associated with.",
               "format": "int64",
               "type": "integer"
            }
         },
         "type": "object",
         "x-doc-skip": true
      },
      "CreateGroup": {
         "additionalProperties": false,
         "properties": {
            "description": {
               "description": "The description of the Group.",
               "type": "string"
            },
            "display_icon_id": {
               "description": "The Icon id for the avatar of this Group.",
               "format": "uuid",
               "type": "string"
            },
            "member_ids": {
               "description": "The Member ids to add to this Group.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array",
               "uniqueItems": true
            },
            "mention_name": {
               "description": "The mention name of this Group.",
               "type": "string"
            },
            "name": {
               "description": "The name of this Group.",
               "type": "string"
            }
         },
         "required": [
            "mention_name",
            "name"
         ],
         "type": "object"
      },
      "CreateIteration": {
         "additionalProperties": false,
         "properties": {
            "description": {
               "description": "The description of the Iteration.",
               "type": "string"
            },
            "end_date": {
               "description": "The date this Iteration ends, e.g. 2019-07-01.",
               "type": "string"
            },
            "follower_ids": {
               "description": "An array of UUIDs for any Members you want to add as Followers.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "labels": {
               "description": "An array of Labels attached to the Iteration.",
               "items": {
                  "$ref": "#/definitions/CreateLabelParams"
               },
               "type": "array"
            },
            "name": {
               "description": "The name of this Iteration.",
               "type": "string"
            },
            "start_date": {
               "description": "The date this Iteration begins, e.g. 2019-07-01.",
               "type": "string"
            }
         },
         "required": [
            "end_date",
            "name",
            "start_date"
         ],
         "type": "object"
      },
      "CreateLabelParams": {
         "additionalProperties": false,
         "description": "Request parameters for creating a Label on a Clubhouse story.",
         "properties": {
            "color": {
               "description": "The hex color to be displayed with the Label (for example, \"#ff0000\").",
               "type": "string"
            },
            "description": {
               "description": "The description of the new Label.",
               "type": "string"
            },
            "external_id": {
               "description": "This field can be set to another unique ID. In the case that the Label has been imported from another tool, the ID in the other tool can be indicated here.",
               "type": "string"
            },
            "name": {
               "description": "The name of the new Label.",
               "type": "string"
            }
         },
         "required": [
            "name"
         ],
         "type": "object"
      },
      "CreateLinkedFile": {
         "additionalProperties": false,
         "properties": {
            "content_type": {
               "description": "The content type of the image (e.g. txt/plain).",
               "type": "string"
            },
            "description": {
               "description": "The description of the file.",
               "type": "string"
            },
            "name": {
               "description": "The name of the file.",
               "type": "string"
            },
            "size": {
               "description": "The filesize, if the integration provided it.",
               "format": "int64",
               "type": "integer"
            },
            "story_id": {
               "description": "The ID of the linked story.",
               "format": "int64",
               "type": "integer"
            },
            "thumbnail_url": {
               "description": "The URL of the thumbnail, if the integration provided it.",
               "type": "string"
            },
            "type": {
               "description": "The integration type of the file (e.g. google, dropbox, box).",
               "enum": [
                  "box",
                  "dropbox",
                  "google",
                  "onedrive",
                  "url"
               ],
               "type": "string"
            },
            "uploader_id": {
               "description": "The UUID of the member that uploaded the file.",
               "format": "uuid",
               "type": "string"
            },
            "url": {
               "description": "The URL of linked file.",
               "type": "string"
            }
         },
         "required": [
            "name",
            "type",
            "url"
         ],
         "type": "object",
         "x-doc-skip": true
      },
      "CreateMilestone": {
         "additionalProperties": false,
         "properties": {
            "categories": {
               "description": "An array of IDs of Categories attached to the Milestone.",
               "items": {
                  "$ref": "#/definitions/CreateCategoryParams"
               },
               "type": "array"
            },
            "completed_at_override": {
               "description": "A manual override for the time/date the Milestone was completed.",
               "format": "date-time",
               "type": "string"
            },
            "description": {
               "description": "The Milestone's description.",
               "type": "string"
            },
            "name": {
               "description": "The name of the Milestone.",
               "type": "string"
            },
            "started_at_override": {
               "description": "A manual override for the time/date the Milestone was started.",
               "format": "date-time",
               "type": "string"
            },
            "state": {
               "description": "The workflow state that the Milestone is in.",
               "enum": [
                  "done",
                  "in progress",
                  "to do"
               ],
               "type": "string"
            }
         },
         "required": [
            "name"
         ],
         "type": "object",
         "x-doc-skip": true
      },
      "CreateOrDeleteReaction": {
         "additionalProperties": false,
         "properties": {
            "emoji": {
               "description": "The emoji short-code to add / remove. E.g. `:thumbsup::skin-tone-4:`.",
               "type": "string"
            }
         },
         "required": [
            "emoji"
         ],
         "type": "object",
         "x-doc-skip": true
      },
      "CreateProject": {
         "additionalProperties": false,
         "properties": {
            "abbreviation": {
               "description": "The Project abbreviation used in Story summaries. Should be kept to 3 characters at most.",
               "type": "string"
            },
            "color": {
               "description": "The color you wish to use for the Project in the system.",
               "type": "string"
            },
            "created_at": {
               "description": "Defaults to the time/date it is created but can be set to reflect another date.",
               "format": "date-time",
               "type": "string"
            },
            "description": {
               "description": "The Project description.",
               "type": "string"
            },
            "external_id": {
               "description": "This field can be set to another unique ID. In the case that the Project has been imported from another tool, the ID in the other tool can be indicated here.",
               "type": "string"
            },
            "follower_ids": {
               "description": "An array of UUIDs for any members you want to add as Owners on this new Epic.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "iteration_length": {
               "description": "The number of weeks per iteration in this Project.",
               "format": "int64",
               "type": "integer"
            },
            "name": {
               "description": "The name of the Project.",
               "type": "string"
            },
            "start_time": {
               "description": "The date at which the Project was started.",
               "format": "date-time",
               "type": "string"
            },
            "team_id": {
               "description": "The ID of the team the project belongs to.",
               "format": "int64",
               "type": "integer"
            },
            "updated_at": {
               "description": "Defaults to the time/date it is created but can be set to reflect another date.",
               "format": "date-time",
               "type": "string"
            }
         },
         "required": [
            "name",
            "team_id"
         ],
         "type": "object",
         "x-doc-skip": true
      },
      "CreateStories": {
         "additionalProperties": false,
         "properties": {
            "stories": {
               "description": "An array of stories to be created.",
               "items": {
                  "$ref": "#/definitions/CreateStoryParams"
               },
               "type": "array"
            }
         },
         "required": [
            "stories"
         ],
         "type": "object",
         "x-doc-skip": true
      },
      "CreateStoryCommentParams": {
         "additionalProperties": false,
         "description": "Request parameters for creating a Comment on a Clubhouse Story.",
         "properties": {
            "author_id": {
               "description": "The Member ID of the Comment's author. Defaults to the user identified by the API token.",
               "format": "uuid",
               "type": "string"
            },
            "created_at": {
               "description": "Defaults to the time/date the comment is created, but can be set to reflect another date.",
               "format": "date-time",
               "type": "string"
            },
            "external_id": {
               "description": "This field can be set to another unique ID. In the case that the comment has been imported from another tool, the ID in the other tool can be indicated here.",
               "type": "string"
            },
            "text": {
               "description": "The comment text.",
               "type": "string"
            },
            "updated_at": {
               "description": "Defaults to the time/date the comment is last updated, but can be set to reflect another date.",
               "format": "date-time",
               "type": "string"
            }
         },
         "required": [
            "text"
         ],
         "type": "object"
      },
      "CreateStoryContents": {
         "additionalProperties": false,
         "description": "A map of story attributes this template populates.",
         "properties": {
            "deadline": {
               "description": "The due date of the story.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "description": {
               "description": "The description of the story.",
               "type": "string"
            },
            "entity_type": {
               "description": "A string description of this resource.",
               "type": "string"
            },
            "epic_id": {
               "description": "The ID of the epic the to be populated.",
               "format": "int64",
               "type": "integer",
               "x-nullable": true
            },
            "estimate": {
               "description": "The numeric point estimate to be populated.",
               "format": "int64",
               "type": "integer",
               "x-nullable": true
            },
            "external_tickets": {
               "description": "An array of the external ticket IDs to be populated.",
               "items": {
                  "$ref": "#/definitions/CreateEntityTemplateExternalTicket"
               },
               "type": "array"
            },
            "file_ids": {
               "description": "An array of the attached file IDs to be populated.",
               "items": {
                  "format": "int64",
                  "type": "integer"
               },
               "type": "array",
               "uniqueItems": true
            },
            "files": {
               "description": "An array of files attached to the story.",
               "items": {
                  "$ref": "#/definitions/File"
               },
               "type": "array"
            },
            "follower_ids": {
               "description": "An array of UUIDs for any Members listed as Followers.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "iteration_id": {
               "description": "The ID of the iteration the to be populated.",
               "format": "int64",
               "type": "integer",
               "x-nullable": true
            },
            "labels": {
               "description": "An array of labels to be populated by the template.",
               "items": {
                  "$ref": "#/definitions/CreateLabelParams"
               },
               "type": "array"
            },
            "linked_file_ids": {
               "description": "An array of the linked file IDs to be populated.",
               "items": {
                  "format": "int64",
                  "type": "integer"
               },
               "type": "array",
               "uniqueItems": true
            },
            "linked_files": {
               "description": "An array of linked files attached to the story.",
               "items": {
                  "$ref": "#/definitions/LinkedFile"
               },
               "type": "array"
            },
            "name": {
               "description": "The name of the story.",
               "type": "string"
            },
            "owner_ids": {
               "description": "An array of UUIDs of the owners of this story.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "project_id": {
               "description": "The ID of the project the story belongs to.",
               "format": "int64",
               "type": "integer"
            },
            "story_type": {
               "description": "The type of story (feature, bug, chore).",
               "type": "string"
            },
            "tasks": {
               "description": "An array of tasks to be populated by the template.",
               "items": {
                  "$ref": "#/definitions/EntityTemplateTask"
               },
               "type": "array"
            },
            "workflow_state_id": {
               "description": "The ID of the workflow state the story is currently in.",
               "format": "int64",
               "type": "integer"
            }
         },
         "type": "object"
      },
      "CreateStoryLink": {
         "additionalProperties": false,
         "properties": {
            "object_id": {
               "description": "The ID of the object Story.",
               "format": "int64",
               "type": "integer"
            },
            "subject_id": {
               "description": "The ID of the subject Story.",
               "format": "int64",
               "type": "integer"
            },
            "verb": {
               "description": "The type of link.",
               "enum": [
                  "blocks",
                  "duplicates",
                  "relates to"
               ],
               "type": "string"
            }
         },
         "required": [
            "object_id",
            "subject_id",
            "verb"
         ],
         "type": "object",
         "x-doc-skip": true
      },
      "CreateStoryLinkParams": {
         "additionalProperties": false,
         "description": "Request parameters for creating a Story Link within a Story.",
         "properties": {
            "object_id": {
               "description": "The unique ID of the Story defined as object.",
               "format": "int64",
               "type": "integer"
            },
            "subject_id": {
               "description": "The unique ID of the Story defined as subject.",
               "format": "int64",
               "type": "integer"
            },
            "verb": {
               "description": "How the subject Story acts on the object Story. This can be \"blocks\", \"duplicates\", or \"relates to\".",
               "enum": [
                  "blocks",
                  "duplicates",
                  "relates to"
               ],
               "type": "string"
            }
         },
         "required": [
            "verb"
         ],
         "type": "object",
         "x-doc-skip": true
      },
      "CreateStoryParams": {
         "additionalProperties": false,
         "description": "Used to create multiple stories in a single request.",
         "properties": {
            "archived": {
               "description": "Controls the story's archived state.",
               "type": "boolean"
            },
            "comments": {
               "description": "An array of comments to add to the story.",
               "items": {
                  "$ref": "#/definitions/CreateStoryCommentParams"
               },
               "type": "array"
            },
            "completed_at_override": {
               "description": "A manual override for the time/date the Story was completed.",
               "format": "date-time",
               "type": "string"
            },
            "created_at": {
               "description": "The time/date the Story was created.",
               "format": "date-time",
               "type": "string"
            },
            "deadline": {
               "description": "The due date of the story.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "description": {
               "description": "The description of the story.",
               "type": "string"
            },
            "epic_id": {
               "description": "The ID of the epic the story belongs to.",
               "format": "int64",
               "type": "integer",
               "x-nullable": true
            },
            "estimate": {
               "description": "The numeric point estimate of the story. Can also be null, which means unestimated.",
               "format": "int64",
               "type": "integer",
               "x-nullable": true
            },
            "external_id": {
               "description": "This field can be set to another unique ID. In the case that the Story has been imported from another tool, the ID in the other tool can be indicated here.",
               "type": "string"
            },
            "external_tickets": {
               "description": "An array of External Tickets associated with this story. These External Tickets must have unquie external id. Duplicated External Tickets will be removed.",
               "items": {
                  "$ref": "#/definitions/CreateExternalTicketParams"
               },
               "type": "array"
            },
            "file_ids": {
               "description": "An array of IDs of files attached to the story.",
               "items": {
                  "format": "int64",
                  "type": "integer"
               },
               "type": "array",
               "uniqueItems": true
            },
            "follower_ids": {
               "description": "An array of UUIDs of the followers of this story.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array",
               "uniqueItems": true
            },
            "iteration_id": {
               "description": "The ID of the iteration the story belongs to.",
               "format": "int64",
               "type": "integer",
               "x-nullable": true
            },
            "labels": {
               "description": "An array of labels attached to the story.",
               "items": {
                  "$ref": "#/definitions/CreateLabelParams"
               },
               "type": "array"
            },
            "linked_file_ids": {
               "description": "An array of IDs of linked files attached to the story.",
               "items": {
                  "format": "int64",
                  "type": "integer"
               },
               "type": "array",
               "uniqueItems": true
            },
            "name": {
               "description": "The name of the story.",
               "type": "string"
            },
            "owner_ids": {
               "description": "An array of UUIDs of the owners of this story.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array",
               "uniqueItems": true
            },
            "project_id": {
               "description": "The ID of the project the story belongs to.",
               "format": "int64",
               "type": "integer"
            },
            "requested_by_id": {
               "description": "The ID of the member that requested the story.",
               "format": "uuid",
               "type": "string"
            },
            "started_at_override": {
               "description": "A manual override for the time/date the Story was started.",
               "format": "date-time",
               "type": "string"
            },
            "story_links": {
               "description": "An array of story links attached to the story.",
               "items": {
                  "$ref": "#/definitions/CreateStoryLinkParams"
               },
               "type": "array"
            },
            "story_type": {
               "description": "The type of story (feature, bug, chore).",
               "enum": [
                  "bug",
                  "chore",
                  "feature"
               ],
               "type": "string"
            },
            "support_tickets": {
               "items": {
                  "$ref": "#/definitions/CreateExternalTicketParams"
               },
               "type": "array",
               "x-doc-skip": true
            },
            "tasks": {
               "description": "An array of tasks connected to the story.",
               "items": {
                  "$ref": "#/definitions/CreateTaskParams"
               },
               "type": "array"
            },
            "updated_at": {
               "description": "The time/date the Story was updated.",
               "format": "date-time",
               "type": "string"
            },
            "workflow_state_id": {
               "description": "The ID of the workflow state the story is currently in.",
               "format": "int64",
               "type": "integer"
            }
         },
         "required": [
            "name",
            "project_id"
         ],
         "type": "object",
         "x-doc-skip": true
      },
      "CreateTask": {
         "additionalProperties": false,
         "properties": {
            "complete": {
               "description": "True/false boolean indicating whether the Task is completed. Defaults to false.",
               "type": "boolean"
            },
            "created_at": {
               "description": "Defaults to the time/date the Task is created but can be set to reflect another creation time/date.",
               "format": "date-time",
               "type": "string"
            },
            "description": {
               "description": "The Task description.",
               "type": "string"
            },
            "external_id": {
               "description": "This field can be set to another unique ID. In the case that the Task has been imported from another tool, the ID in the other tool can be indicated here.",
               "type": "string"
            },
            "owner_ids": {
               "description": "An array of UUIDs for any members you want to add as Owners on this new Task.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "updated_at": {
               "description": "Defaults to the time/date the Task is created in Clubhouse but can be set to reflect another time/date.",
               "format": "date-time",
               "type": "string"
            }
         },
         "required": [
            "description"
         ],
         "type": "object",
         "x-doc-skip": true
      },
      "CreateTaskParams": {
         "additionalProperties": false,
         "description": "Request parameters for creating a Task on a Story.",
         "properties": {
            "complete": {
               "description": "True/false boolean indicating whether the Task is completed. Defaults to false.",
               "type": "boolean"
            },
            "created_at": {
               "description": "Defaults to the time/date the Task is created but can be set to reflect another creation time/date.",
               "format": "date-time",
               "type": "string"
            },
            "description": {
               "description": "The Task description.",
               "type": "string"
            },
            "external_id": {
               "description": "This field can be set to another unique ID. In the case that the Task has been imported from another tool, the ID in the other tool can be indicated here.",
               "type": "string"
            },
            "owner_ids": {
               "description": "An array of UUIDs for any members you want to add as Owners on this new Task.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "updated_at": {
               "description": "Defaults to the time/date the Task is created in Clubhouse but can be set to reflect another time/date.",
               "format": "date-time",
               "type": "string"
            }
         },
         "required": [
            "description"
         ],
         "type": "object"
      },
      "DeleteStories": {
         "additionalProperties": false,
         "properties": {
            "story_ids": {
               "description": "An array of IDs of Stories to delete.",
               "items": {
                  "format": "int64",
                  "type": "integer"
               },
               "type": "array",
               "uniqueItems": true
            }
         },
         "required": [
            "story_ids"
         ],
         "type": "object",
         "x-doc-skip": true
      },
      "EntityTemplate": {
         "additionalProperties": false,
         "description": "An entity template can be used to prefill various fields when creating new stories.",
         "properties": {
            "author_id": {
               "description": "The unique ID of the member who created the template.",
               "format": "uuid",
               "type": "string"
            },
            "created_at": {
               "description": "The time/date when the entity template was created.",
               "format": "date-time",
               "type": "string"
            },
            "entity_type": {
               "description": "A string description of this resource.",
               "type": "string"
            },
            "id": {
               "description": "The unique identifier for the entity template.",
               "format": "uuid",
               "type": "string"
            },
            "last_used_at": {
               "description": "The last time that someone created an entity using this template.",
               "format": "date-time",
               "type": "string"
            },
            "name": {
               "description": "The template's name.",
               "type": "string"
            },
            "story_contents": {
               "$ref": "#/definitions/StoryContents"
            },
            "updated_at": {
               "description": "The time/date when the entity template was last updated.",
               "format": "date-time",
               "type": "string"
            }
         },
         "required": [
            "author_id",
            "created_at",
            "entity_type",
            "id",
            "last_used_at",
            "name",
            "story_contents",
            "updated_at"
         ],
         "type": "object"
      },
      "EntityTemplateStoryContentsTasks": {
         "additionalProperties": false,
         "properties": {
            "complete": {
               "type": "boolean"
            },
            "description": {
               "type": "string"
            },
            "external_id": {
               "type": "string"
            },
            "owner_ids": {
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "position": {
               "format": "int64",
               "type": "integer"
            }
         },
         "required": [
            "description"
         ],
         "type": "object"
      },
      "EntityTemplateTask": {
         "additionalProperties": false,
         "description": "Request parameters for specifying how to pre-populate a task through a template.",
         "properties": {
            "complete": {
               "description": "True/false boolean indicating whether the Task is completed. Defaults to false.",
               "type": "boolean"
            },
            "description": {
               "description": "The Task description.",
               "type": "string"
            },
            "external_id": {
               "description": "This field can be set to another unique ID. In the case that the Task has been imported from another tool, the ID in the other tool can be indicated here.",
               "type": "string"
            },
            "owner_ids": {
               "description": "An array of UUIDs for any members you want to add as Owners on this new Task.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            }
         },
         "required": [
            "description"
         ],
         "type": "object"
      },
      "Epic": {
         "additionalProperties": false,
         "description": "An Epic is a collection of stories that together might make up a release, a milestone, or some other large initiative that your organization is working on.",
         "properties": {
            "app_url": {
               "description": "The Clubhouse application url for the Epic.",
               "type": "string"
            },
            "archived": {
               "description": "True/false boolean that indicates whether the Epic is archived or not.",
               "type": "boolean"
            },
            "comments": {
               "description": "A nested array of threaded comments.",
               "items": {
                  "$ref": "#/definitions/ThreadedComment"
               },
               "type": "array"
            },
            "completed": {
               "description": "A true/false boolean indicating if the Epic has been completed.",
               "type": "boolean"
            },
            "completed_at": {
               "description": "The time/date the Epic was completed.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "completed_at_override": {
               "description": "A manual override for the time/date the Epic was completed.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "created_at": {
               "description": "The time/date the Epic was created.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "deadline": {
               "description": "The Epic's deadline.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "description": {
               "description": "The Epic's description.",
               "type": "string"
            },
            "entity_type": {
               "description": "A string description of this resource.",
               "type": "string"
            },
            "epic_state_id": {
               "description": "The ID of the Epic State.",
               "format": "int64",
               "type": "integer"
            },
            "external_id": {
               "description": "This field can be set to another unique ID. In the case that the Epic has been imported from another tool, the ID in the other tool can be indicated here.",
               "type": "string",
               "x-nullable": true
            },
            "external_tickets": {
               "items": {
                  "$ref": "#/definitions/SupportTicket"
               },
               "type": "array"
            },
            "follower_ids": {
               "description": "An array of UUIDs for any Members you want to add as Followers on this Epic.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "group_mention_ids": {
               "description": "An array of Group IDs that have been mentioned in the Epic description.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "id": {
               "description": "The unique ID of the Epic.",
               "format": "int64",
               "type": "integer"
            },
            "labels": {
               "description": "An array of Labels attached to the Epic.",
               "items": {
                  "$ref": "#/definitions/Label"
               },
               "type": "array"
            },
            "member_mention_ids": {
               "description": "An array of Member IDs that have been mentioned in the Epic description.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "mention_ids": {
               "description": "Deprecated: use member_mention_ids.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "milestone_id": {
               "description": "The ID of the Milestone this Epic is related to.",
               "format": "int64",
               "type": "integer",
               "x-nullable": true
            },
            "name": {
               "description": "The name of the Epic.",
               "type": "string"
            },
            "owner_ids": {
               "description": "An array of UUIDs for any members you want to add as Owners on this new Epic.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "position": {
               "description": "The Epic's relative position in the Epic workflow state.",
               "format": "int64",
               "type": "integer"
            },
            "project_ids": {
               "description": "The IDs of Projects related to this Epic.",
               "items": {
                  "format": "int64",
                  "type": "integer"
               },
               "type": "array"
            },
            "requested_by_id": {
               "description": "The ID of the Member that requested the epic.",
               "format": "uuid",
               "type": "string"
            },
            "started": {
               "description": "A true/false boolean indicating if the Epic has been started.",
               "type": "boolean"
            },
            "started_at": {
               "description": "The time/date the Epic was started.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "started_at_override": {
               "description": "A manual override for the time/date the Epic was started.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "state": {
               "description": "`Deprecated` The workflow state that the Epic is in.",
               "type": "string"
            },
            "stats": {
               "$ref": "#/definitions/EpicStats"
            },
            "support_tickets": {
               "items": {
                  "$ref": "#/definitions/SupportTicket"
               },
               "type": "array",
               "x-doc-skip": true
            },
            "updated_at": {
               "description": "The time/date the Epic was updated.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            }
         },
         "required": [
            "app_url",
            "archived",
            "comments",
            "completed",
            "completed_at",
            "completed_at_override",
            "created_at",
            "deadline",
            "description",
            "entity_type",
            "epic_state_id",
            "external_id",
            "external_tickets",
            "follower_ids",
            "group_mention_ids",
            "id",
            "labels",
            "member_mention_ids",
            "mention_ids",
            "milestone_id",
            "name",
            "owner_ids",
            "position",
            "project_ids",
            "requested_by_id",
            "started",
            "started_at",
            "started_at_override",
            "state",
            "stats",
            "support_tickets",
            "updated_at"
         ],
         "type": "object"
      },
      "EpicSearchResults": {
         "additionalProperties": false,
         "description": "The results of the Epic search query.",
         "properties": {
            "cursors": {
               "items": {
                  "type": "string"
               },
               "type": "array"
            },
            "data": {
               "description": "A list of search results.",
               "items": {
                  "$ref": "#/definitions/Epic"
               },
               "type": "array"
            },
            "next": {
               "description": "The URL path and query string for the next page of search results.",
               "type": "string",
               "x-nullable": true
            },
            "total": {
               "description": "The total number of matches for the search query. The first 1000 matches can be paged through via the API.",
               "format": "int64",
               "type": "integer"
            }
         },
         "required": [
            "data",
            "next",
            "total"
         ],
         "type": "object"
      },
      "EpicSlim": {
         "additionalProperties": false,
         "description": "EpicSlim represents the same resource as an Epic but is more light-weight, including all Epic fields except the description string and comments array. Use the [Get Epic](#Get-Epic) endpoint to fetch the unabridged payload for an Epic.",
         "properties": {
            "app_url": {
               "description": "The Clubhouse application url for the Epic.",
               "type": "string"
            },
            "archived": {
               "description": "True/false boolean that indicates whether the Epic is archived or not.",
               "type": "boolean"
            },
            "completed": {
               "description": "A true/false boolean indicating if the Epic has been completed.",
               "type": "boolean"
            },
            "completed_at": {
               "description": "The time/date the Epic was completed.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "completed_at_override": {
               "description": "A manual override for the time/date the Epic was completed.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "created_at": {
               "description": "The time/date the Epic was created.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "deadline": {
               "description": "The Epic's deadline.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "entity_type": {
               "description": "A string description of this resource.",
               "type": "string"
            },
            "epic_state_id": {
               "description": "The ID of the Epic State.",
               "format": "int64",
               "type": "integer"
            },
            "external_id": {
               "description": "This field can be set to another unique ID. In the case that the Epic has been imported from another tool, the ID in the other tool can be indicated here.",
               "type": "string",
               "x-nullable": true
            },
            "external_tickets": {
               "items": {
                  "$ref": "#/definitions/SupportTicket"
               },
               "type": "array"
            },
            "follower_ids": {
               "description": "An array of UUIDs for any Members you want to add as Followers on this Epic.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "group_mention_ids": {
               "description": "An array of Group IDs that have been mentioned in the Epic description.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "id": {
               "description": "The unique ID of the Epic.",
               "format": "int64",
               "type": "integer"
            },
            "labels": {
               "description": "An array of Labels attached to the Epic.",
               "items": {
                  "$ref": "#/definitions/Label"
               },
               "type": "array"
            },
            "member_mention_ids": {
               "description": "An array of Member IDs that have been mentioned in the Epic description.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "mention_ids": {
               "description": "Deprecated: use member_mention_ids.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "milestone_id": {
               "description": "The ID of the Milestone this Epic is related to.",
               "format": "int64",
               "type": "integer",
               "x-nullable": true
            },
            "name": {
               "description": "The name of the Epic.",
               "type": "string"
            },
            "owner_ids": {
               "description": "An array of UUIDs for any members you want to add as Owners on this new Epic.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "position": {
               "description": "The Epic's relative position in the Epic workflow state.",
               "format": "int64",
               "type": "integer"
            },
            "project_ids": {
               "description": "The IDs of Projects related to this Epic.",
               "items": {
                  "format": "int64",
                  "type": "integer"
               },
               "type": "array"
            },
            "requested_by_id": {
               "description": "The ID of the Member that requested the epic.",
               "format": "uuid",
               "type": "string"
            },
            "started": {
               "description": "A true/false boolean indicating if the Epic has been started.",
               "type": "boolean"
            },
            "started_at": {
               "description": "The time/date the Epic was started.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "started_at_override": {
               "description": "A manual override for the time/date the Epic was started.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "state": {
               "description": "`Deprecated` The workflow state that the Epic is in.",
               "type": "string"
            },
            "stats": {
               "$ref": "#/definitions/EpicStats"
            },
            "support_tickets": {
               "items": {
                  "$ref": "#/definitions/SupportTicket"
               },
               "type": "array",
               "x-doc-skip": true
            },
            "updated_at": {
               "description": "The time/date the Epic was updated.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            }
         },
         "required": [
            "app_url",
            "archived",
            "completed",
            "completed_at",
            "completed_at_override",
            "created_at",
            "deadline",
            "entity_type",
            "epic_state_id",
            "external_id",
            "external_tickets",
            "follower_ids",
            "group_mention_ids",
            "id",
            "labels",
            "member_mention_ids",
            "mention_ids",
            "milestone_id",
            "name",
            "owner_ids",
            "position",
            "project_ids",
            "requested_by_id",
            "started",
            "started_at",
            "started_at_override",
            "state",
            "stats",
            "support_tickets",
            "updated_at"
         ],
         "type": "object"
      },
      "EpicState": {
         "additionalProperties": false,
         "description": "Epic State is any of the at least 3 columns. Epic States correspond to one of 3 types: Unstarted, Started, or Done.",
         "properties": {
            "color": {
               "description": "The hex color for this Epic State.",
               "type": "string"
            },
            "created_at": {
               "description": "The time/date the Epic State was created.",
               "format": "date-time",
               "type": "string"
            },
            "description": {
               "description": "The description of what sort of Epics belong in that Epic State.",
               "type": "string"
            },
            "entity_type": {
               "description": "A string description of this resource.",
               "type": "string"
            },
            "id": {
               "description": "The unique ID of the Epic State.",
               "format": "int64",
               "type": "integer"
            },
            "name": {
               "description": "The Epic State's name.",
               "type": "string"
            },
            "position": {
               "description": "The position that the Epic State is in, starting with 0 at the left.",
               "format": "int64",
               "type": "integer"
            },
            "type": {
               "description": "The type of Epic State (Unstarted, Started, or Done)",
               "type": "string"
            },
            "updated_at": {
               "description": "When the Epic State was last updated.",
               "format": "date-time",
               "type": "string"
            }
         },
         "required": [
            "color",
            "created_at",
            "description",
            "entity_type",
            "id",
            "name",
            "position",
            "type",
            "updated_at"
         ],
         "type": "object"
      },
      "EpicStats": {
         "additionalProperties": false,
         "description": "A group of calculated values for this Epic.",
         "properties": {
            "average_cycle_time": {
               "description": "The average cycle time (in seconds) of completed stories in this Epic.",
               "format": "int64",
               "type": "integer"
            },
            "average_lead_time": {
               "description": "The average lead time (in seconds) of completed stories in this Epic.",
               "format": "int64",
               "type": "integer"
            },
            "last_story_update": {
               "description": "The date of the last update of a Story in this Epic.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "num_points": {
               "description": "The total number of points in this Epic.",
               "format": "int64",
               "type": "integer"
            },
            "num_points_done": {
               "description": "The total number of completed points in this Epic.",
               "format": "int64",
               "type": "integer"
            },
            "num_points_started": {
               "description": "The total number of started points in this Epic.",
               "format": "int64",
               "type": "integer"
            },
            "num_points_unstarted": {
               "description": "The total number of unstarted points in this Epic.",
               "format": "int64",
               "type": "integer"
            },
            "num_stories_done": {
               "description": "The total number of done Stories in this Epic.",
               "format": "int64",
               "type": "integer"
            },
            "num_stories_started": {
               "description": "The total number of started Stories in this Epic.",
               "format": "int64",
               "type": "integer"
            },
            "num_stories_unestimated": {
               "description": "The total number of Stories with no point estimate.",
               "format": "int64",
               "type": "integer"
            },
            "num_stories_unstarted": {
               "description": "The total number of unstarted Stories in this Epic.",
               "format": "int64",
               "type": "integer"
            }
         },
         "required": [
            "last_story_update",
            "num_points",
            "num_points_done",
            "num_points_started",
            "num_points_unstarted",
            "num_stories_done",
            "num_stories_started",
            "num_stories_unestimated",
            "num_stories_unstarted"
         ],
         "type": "object"
      },
      "EpicWorkflow": {
         "additionalProperties": false,
         "description": "Epic Workflow is the array of defined Epic States. Epic Workflow can be queried using the API but must be updated in the Clubhouse UI. ",
         "properties": {
            "created_at": {
               "description": "The date the Epic Workflow was created.",
               "format": "date-time",
               "type": "string"
            },
            "default_epic_state_id": {
               "description": "The unique ID of the default Epic State that new Epics are assigned by default.",
               "format": "int64",
               "type": "integer"
            },
            "entity_type": {
               "description": "A string description of this resource.",
               "type": "string"
            },
            "epic_states": {
               "description": "A map of the Epic States in this Epic Workflow.",
               "items": {
                  "$ref": "#/definitions/EpicState"
               },
               "type": "array"
            },
            "id": {
               "description": "The unique ID of the Epic Workflow.",
               "format": "int64",
               "type": "integer"
            },
            "updated_at": {
               "description": "The date the Epic Workflow was updated.",
               "format": "date-time",
               "type": "string"
            }
         },
         "required": [
            "created_at",
            "default_epic_state_id",
            "entity_type",
            "epic_states",
            "id",
            "updated_at"
         ],
         "type": "object"
      },
      "ExternalTicket": {
         "additionalProperties": false,
         "description": "A External Ticket allows you to create a link between an external system, like Zendesk, and a Clubhouse story.",
         "properties": {
            "epic_ids": {
               "description": "The Clubhouse Epics associated with this External Ticket",
               "items": {
                  "format": "double",
                  "type": "number"
               },
               "type": "array"
            },
            "external_id": {
               "description": "The ID used in the external system.",
               "type": "string"
            },
            "external_url": {
               "description": "The full qualified url of the external ticket.",
               "type": "string"
            },
            "id": {
               "description": "A unique ID internal to Clubhouse.",
               "format": "uuid",
               "type": "string"
            },
            "story_ids": {
               "description": "The Clubhouse Story ids associated with this External Ticket.",
               "items": {
                  "format": "double",
                  "type": "number"
               },
               "type": "array"
            }
         },
         "required": [
            "epic_ids",
            "external_id",
            "id",
            "story_ids"
         ],
         "type": "object"
      },
      "File": {
         "additionalProperties": false,
         "description": "A File is any document uploaded to your Clubhouse. Files attached from a third-party service can be accessed using the Linked Files endpoint.",
         "properties": {
            "content_type": {
               "description": "Free form string corresponding to a text or image file.",
               "type": "string"
            },
            "created_at": {
               "description": "The time/date that the file was created.",
               "format": "date-time",
               "type": "string"
            },
            "description": {
               "description": "The description of the file.",
               "type": "string",
               "x-nullable": true
            },
            "entity_type": {
               "description": "A string description of this resource.",
               "type": "string"
            },
            "external_id": {
               "description": "This field can be set to another unique ID. In the case that the File has been imported from another tool, the ID in the other tool can be indicated here.",
               "type": "string",
               "x-nullable": true
            },
            "filename": {
               "description": "The name assigned to the file in Clubhouse upon upload.",
               "type": "string"
            },
            "group_mention_ids": {
               "description": "The unique IDs of the Groups who are mentioned in the file description.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "id": {
               "description": "The unique ID for the file.",
               "format": "int64",
               "type": "integer"
            },
            "member_mention_ids": {
               "description": "The unique IDs of the Members who are mentioned in the file description.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "mention_ids": {
               "description": "Deprecated: use member_mention_ids.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "name": {
               "description": "The optional User-specified name of the file.",
               "type": "string"
            },
            "size": {
               "description": "The size of the file.",
               "format": "int64",
               "type": "integer"
            },
            "story_ids": {
               "description": "The unique IDs of the Stories associated with this file.",
               "items": {
                  "format": "int64",
                  "type": "integer"
               },
               "type": "array"
            },
            "thumbnail_url": {
               "description": "The url where the thumbnail of the file can be found in Clubhouse.",
               "type": "string",
               "x-nullable": true
            },
            "updated_at": {
               "description": "The time/date that the file was updated.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "uploader_id": {
               "description": "The unique ID of the Member who uploaded the file.",
               "format": "uuid",
               "type": "string"
            },
            "url": {
               "description": "The URL for the file.",
               "type": "string",
               "x-nullable": true
            }
         },
         "required": [
            "content_type",
            "created_at",
            "description",
            "entity_type",
            "external_id",
            "filename",
            "group_mention_ids",
            "id",
            "member_mention_ids",
            "mention_ids",
            "name",
            "size",
            "story_ids",
            "thumbnail_url",
            "updated_at",
            "uploader_id",
            "url"
         ],
         "type": "object"
      },
      "GetMember": {
         "additionalProperties": false,
         "properties": {
            "org-public-id": {
               "description": "The unique ID of the Organization to limit the lookup to.",
               "format": "uuid",
               "type": "string"
            }
         },
         "type": "object",
         "x-doc-skip": true
      },
      "Group": {
         "additionalProperties": false,
         "description": "A Group.",
         "properties": {
            "app_url": {
               "description": "The Clubhouse application url for the Group.",
               "type": "string"
            },
            "archived": {
               "description": "Whether or not the Group is archived.",
               "type": "boolean"
            },
            "description": {
               "description": "The description of the Group.",
               "type": "string"
            },
            "display_icon": {
               "$ref": "#/definitions/Icon",
               "x-nullable": true
            },
            "entity_type": {
               "description": "A string description of this resource.",
               "type": "string"
            },
            "id": {
               "description": "The id of the Group.",
               "format": "uuid",
               "type": "string"
            },
            "member_ids": {
               "description": "The Member IDs contain within the Group.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "mention_name": {
               "description": "The mention name of the Group.",
               "type": "string"
            },
            "name": {
               "description": "The name of the Group.",
               "type": "string"
            }
         },
         "required": [
            "app_url",
            "archived",
            "description",
            "display_icon",
            "entity_type",
            "id",
            "member_ids",
            "mention_name",
            "name"
         ],
         "type": "object"
      },
      "Icon": {
         "additionalProperties": false,
         "description": "Icons are used to attach images to Organizations, Members, and Loading screens in the Clubhouse web application.",
         "properties": {
            "created_at": {
               "description": "The time/date that the Icon was created.",
               "format": "date-time",
               "type": "string"
            },
            "entity_type": {
               "description": "A string description of this resource.",
               "type": "string"
            },
            "id": {
               "description": "The unique ID of the Icon.",
               "format": "uuid",
               "type": "string"
            },
            "updated_at": {
               "description": "The time/date that the Icon was updated.",
               "format": "date-time",
               "type": "string"
            },
            "url": {
               "description": "The URL of the Icon.",
               "type": "string"
            }
         },
         "required": [
            "created_at",
            "entity_type",
            "id",
            "updated_at",
            "url"
         ],
         "type": "object"
      },
      "Identity": {
         "additionalProperties": false,
         "description": "The Identity of the GitHub user that authored the Commit.",
         "properties": {
            "entity_type": {
               "description": "A string description of this resource.",
               "type": "string"
            },
            "name": {
               "description": "This is your login in GitHub.",
               "type": "string",
               "x-nullable": true
            },
            "type": {
               "description": "The type of Identity; currently only type is github.",
               "type": "string",
               "x-nullable": true
            }
         },
         "required": [
            "entity_type",
            "name",
            "type"
         ],
         "type": "object"
      },
      "Iteration": {
         "additionalProperties": false,
         "description": "An Iteration is a defined, time-boxed period of development for a collection of Stories. See https://help.clubhouse.io/hc/en-us/articles/360028953452-Iterations-Overview for more information.",
         "properties": {
            "app_url": {
               "description": "The Clubhouse application url for the Iteration.",
               "type": "string"
            },
            "created_at": {
               "description": "The instant when this iteration was created.",
               "format": "date-time",
               "type": "string"
            },
            "description": {
               "description": "The description of the iteration.",
               "type": "string"
            },
            "end_date": {
               "description": "The date this iteration begins.",
               "format": "date-time",
               "type": "string"
            },
            "entity_type": {
               "description": "A string description of this resource",
               "type": "string"
            },
            "follower_ids": {
               "description": "An array of UUIDs for any Members listed as Followers.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "group_mention_ids": {
               "description": "An array of Group IDs that have been mentioned in the Story description.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "id": {
               "description": "The ID of the iteration.",
               "format": "int64",
               "type": "integer"
            },
            "labels": {
               "description": "An array of labels attached to the iteration.",
               "items": {
                  "$ref": "#/definitions/Label"
               },
               "type": "array"
            },
            "member_mention_ids": {
               "description": "An array of Member IDs that have been mentioned in the Story description.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "mention_ids": {
               "description": "Deprecated: use member_mention_ids.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "name": {
               "description": "The name of the iteration.",
               "type": "string"
            },
            "start_date": {
               "description": "The date this iteration begins.",
               "format": "date-time",
               "type": "string"
            },
            "stats": {
               "$ref": "#/definitions/IterationStats"
            },
            "status": {
               "description": "The status of the iteration. Values are either \"unstarted\", \"started\", or \"done\".",
               "type": "string"
            },
            "updated_at": {
               "description": "The instant when this iteration was last updated.",
               "format": "date-time",
               "type": "string"
            }
         },
         "required": [
            "app_url",
            "created_at",
            "description",
            "end_date",
            "entity_type",
            "follower_ids",
            "group_mention_ids",
            "id",
            "labels",
            "member_mention_ids",
            "mention_ids",
            "name",
            "start_date",
            "stats",
            "status",
            "updated_at"
         ],
         "type": "object"
      },
      "IterationSlim": {
         "additionalProperties": false,
         "description": "IterationSlim represents the same resource as an Iteration, but is more light-weight. Use the [Get Iteration](#Get-Iteration) endpoint to fetch the unabridged payload for an Iteration. ",
         "properties": {
            "app_url": {
               "description": "The Clubhouse application url for the Iteration.",
               "type": "string"
            },
            "created_at": {
               "description": "The instant when this iteration was created.",
               "format": "date-time",
               "type": "string"
            },
            "end_date": {
               "description": "The date this iteration begins.",
               "format": "date-time",
               "type": "string"
            },
            "entity_type": {
               "description": "A string description of this resource",
               "type": "string"
            },
            "follower_ids": {
               "description": "An array of UUIDs for any Members listed as Followers.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "group_mention_ids": {
               "description": "An array of Group IDs that have been mentioned in the Story description.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "id": {
               "description": "The ID of the iteration.",
               "format": "int64",
               "type": "integer"
            },
            "labels": {
               "description": "An array of labels attached to the iteration.",
               "items": {
                  "$ref": "#/definitions/Label"
               },
               "type": "array"
            },
            "member_mention_ids": {
               "description": "An array of Member IDs that have been mentioned in the Story description.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "mention_ids": {
               "description": "Deprecated: use member_mention_ids.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "name": {
               "description": "The name of the iteration.",
               "type": "string"
            },
            "start_date": {
               "description": "The date this iteration begins.",
               "format": "date-time",
               "type": "string"
            },
            "stats": {
               "$ref": "#/definitions/IterationStats"
            },
            "status": {
               "description": "The status of the iteration. Values are either \"unstarted\", \"started\", or \"done\".",
               "type": "string"
            },
            "updated_at": {
               "description": "The instant when this iteration was last updated.",
               "format": "date-time",
               "type": "string"
            }
         },
         "required": [
            "app_url",
            "created_at",
            "end_date",
            "entity_type",
            "follower_ids",
            "group_mention_ids",
            "id",
            "labels",
            "member_mention_ids",
            "mention_ids",
            "name",
            "start_date",
            "stats",
            "status",
            "updated_at"
         ],
         "type": "object"
      },
      "IterationStats": {
         "additionalProperties": false,
         "description": "A group of calculated values for this Iteration.",
         "properties": {
            "average_cycle_time": {
               "description": "The average cycle time (in seconds) of completed stories in this Iteration.",
               "format": "int64",
               "type": "integer"
            },
            "average_lead_time": {
               "description": "The average lead time (in seconds) of completed stories in this Iteration.",
               "format": "int64",
               "type": "integer"
            },
            "num_points": {
               "description": "The total number of points in this Iteration.",
               "format": "int64",
               "type": "integer"
            },
            "num_points_done": {
               "description": "The total number of completed points in this Iteration.",
               "format": "int64",
               "type": "integer"
            },
            "num_points_started": {
               "description": "The total number of started points in this Iteration.",
               "format": "int64",
               "type": "integer"
            },
            "num_points_unstarted": {
               "description": "The total number of unstarted points in this Iteration.",
               "format": "int64",
               "type": "integer"
            },
            "num_stories_done": {
               "description": "The total number of done Stories in this Iteration.",
               "format": "int64",
               "type": "integer"
            },
            "num_stories_started": {
               "description": "The total number of started Stories in this Iteration.",
               "format": "int64",
               "type": "integer"
            },
            "num_stories_unestimated": {
               "description": "The total number of Stories with no point estimate.",
               "format": "int64",
               "type": "integer"
            },
            "num_stories_unstarted": {
               "description": "The total number of unstarted Stories in this Iteration.",
               "format": "int64",
               "type": "integer"
            }
         },
         "required": [
            "num_points",
            "num_points_done",
            "num_points_started",
            "num_points_unstarted",
            "num_stories_done",
            "num_stories_started",
            "num_stories_unestimated",
            "num_stories_unstarted"
         ],
         "type": "object"
      },
      "Label": {
         "additionalProperties": false,
         "description": "A Label can be used to associate and filter Stories and Epics, and also create new Workspaces.",
         "properties": {
            "app_url": {
               "description": "The Clubhouse application url for the Label.",
               "type": "string"
            },
            "archived": {
               "description": "A true/false boolean indicating if the Label has been archived.",
               "type": "boolean"
            },
            "color": {
               "description": "The hex color to be displayed with the Label (for example, \"#ff0000\").",
               "type": "string",
               "x-nullable": true
            },
            "created_at": {
               "description": "The time/date that the Label was created.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "description": {
               "description": "The description of the Label.",
               "type": "string",
               "x-nullable": true
            },
            "entity_type": {
               "description": "A string description of this resource.",
               "type": "string"
            },
            "external_id": {
               "description": "This field can be set to another unique ID. In the case that the Label has been imported from another tool, the ID in the other tool can be indicated here.",
               "type": "string",
               "x-nullable": true
            },
            "id": {
               "description": "The unique ID of the Label.",
               "format": "int64",
               "type": "integer"
            },
            "name": {
               "description": "The name of the Label.",
               "type": "string"
            },
            "stats": {
               "$ref": "#/definitions/LabelStats"
            },
            "updated_at": {
               "description": "The time/date that the Label was updated.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            }
         },
         "required": [
            "app_url",
            "archived",
            "color",
            "created_at",
            "description",
            "entity_type",
            "external_id",
            "id",
            "name",
            "updated_at"
         ],
         "type": "object"
      },
      "LabelStats": {
         "additionalProperties": false,
         "description": "A group of calculated values for this Label.",
         "properties": {
            "num_epics": {
               "description": "The total number of Epics with this Label.",
               "format": "int64",
               "type": "integer"
            },
            "num_points_completed": {
               "description": "The total number of completed points with this Label.",
               "format": "int64",
               "type": "integer"
            },
            "num_points_in_progress": {
               "description": "The total number of in-progress points with this Label.",
               "format": "int64",
               "type": "integer"
            },
            "num_points_total": {
               "description": "The total number of points with this Label.",
               "format": "int64",
               "type": "integer"
            },
            "num_stories_completed": {
               "description": "The total number of completed Stories with this Label.",
               "format": "int64",
               "type": "integer"
            },
            "num_stories_in_progress": {
               "description": "The total number of in-progress Stories with this Label.",
               "format": "int64",
               "type": "integer"
            },
            "num_stories_total": {
               "description": "The total number of Stories with this Label.",
               "format": "int64",
               "type": "integer"
            },
            "num_stories_unestimated": {
               "description": "The total number of Stories with no point estimate with this Label.",
               "format": "int64",
               "type": "integer"
            }
         },
         "required": [
            "num_epics",
            "num_points_completed",
            "num_points_in_progress",
            "num_points_total",
            "num_stories_completed",
            "num_stories_in_progress",
            "num_stories_total",
            "num_stories_unestimated"
         ],
         "type": "object"
      },
      "LinkedFile": {
         "additionalProperties": false,
         "description": "Linked files are stored on a third-party website and linked to one or more Stories. Clubhouse currently supports linking files from Google Drive, Dropbox, Box, and by URL.",
         "properties": {
            "content_type": {
               "description": "The content type of the image (e.g. txt/plain).",
               "type": "string",
               "x-nullable": true
            },
            "created_at": {
               "description": "The time/date the LinkedFile was created.",
               "format": "date-time",
               "type": "string"
            },
            "description": {
               "description": "The description of the file.",
               "type": "string",
               "x-nullable": true
            },
            "entity_type": {
               "description": "A string description of this resource.",
               "type": "string"
            },
            "group_mention_ids": {
               "description": "The groups that are mentioned in the description of the file.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "id": {
               "description": "The unique identifier for the file.",
               "format": "int64",
               "type": "integer"
            },
            "member_mention_ids": {
               "description": "The members that are mentioned in the description of the file.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "mention_ids": {
               "description": "Deprecated: use member_mention_ids.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "name": {
               "description": "The name of the linked file.",
               "type": "string"
            },
            "size": {
               "description": "The filesize, if the integration provided it.",
               "format": "int64",
               "type": "integer",
               "x-nullable": true
            },
            "story_ids": {
               "description": "The IDs of the stories this file is attached to.",
               "items": {
                  "format": "int64",
                  "type": "integer"
               },
               "type": "array"
            },
            "thumbnail_url": {
               "description": "The URL of the file thumbnail, if the integration provided it.",
               "type": "string",
               "x-nullable": true
            },
            "type": {
               "description": "The integration type (e.g. google, dropbox, box).",
               "type": "string"
            },
            "updated_at": {
               "description": "The time/date the LinkedFile was updated.",
               "format": "date-time",
               "type": "string"
            },
            "uploader_id": {
               "description": "The UUID of the member that uploaded the file.",
               "format": "uuid",
               "type": "string"
            },
            "url": {
               "description": "The URL of the file.",
               "type": "string"
            }
         },
         "required": [
            "content_type",
            "created_at",
            "description",
            "entity_type",
            "group_mention_ids",
            "id",
            "member_mention_ids",
            "mention_ids",
            "name",
            "size",
            "story_ids",
            "thumbnail_url",
            "type",
            "updated_at",
            "uploader_id",
            "url"
         ],
         "type": "object"
      },
      "ListLabels": {
         "additionalProperties": false,
         "properties": {
            "slim": {
               "description": "A true/false boolean indicating if the slim versions of the Label should be returned.",
               "type": "boolean"
            }
         },
         "type": "object",
         "x-doc-skip": true
      },
      "ListMembers": {
         "additionalProperties": false,
         "properties": {
            "org-public-id": {
               "description": "The unique ID of the Organization to limit the list to.",
               "format": "uuid",
               "type": "string"
            }
         },
         "type": "object",
         "x-doc-skip": true
      },
      "MaxSearchResultsExceededError": {
         "additionalProperties": false,
         "description": "Error returned when total maximum supported results have been reached.",
         "properties": {
            "error": {
               "description": "The name for this type of error, `maximum-results-exceeded`",
               "type": "string"
            },
            "maximum-results": {
               "description": "The maximum number of search results supported, `1000`",
               "format": "int64",
               "type": "integer"
            },
            "message": {
               "description": "An explanatory message: \"A maximum of 1000 search results are supported.\"",
               "type": "string"
            }
         },
         "required": [
            "error",
            "maximum-results",
            "message"
         ],
         "type": "object"
      },
      "Member": {
         "additionalProperties": false,
         "description": "Details about individual Clubhouse user within the Clubhouse organization that has issued the token.",
         "properties": {
            "created_at": {
               "description": "The time/date the Member was created.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "created_without_invite": {
               "description": "Whether this member was created as a placeholder entity.",
               "type": "boolean",
               "x-doc-skip": true
            },
            "disabled": {
               "description": "True/false boolean indicating whether the Member has been disabled within this Organization.",
               "type": "boolean"
            },
            "entity_type": {
               "description": "A string description of this resource.",
               "type": "string"
            },
            "group_ids": {
               "description": "The Member's group ids",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "id": {
               "description": "The Member's ID in Clubhouse.",
               "format": "uuid",
               "type": "string"
            },
            "profile": {
               "$ref": "#/definitions/Profile"
            },
            "role": {
               "description": "The Member's role in the Clubhouse organization.",
               "type": "string"
            },
            "updated_at": {
               "description": "The time/date the Member was last updated.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            }
         },
         "required": [
            "created_at",
            "created_without_invite",
            "disabled",
            "entity_type",
            "group_ids",
            "id",
            "profile",
            "role",
            "updated_at"
         ],
         "type": "object"
      },
      "MemberInfo": {
         "additionalProperties": false,
         "properties": {
            "id": {
               "format": "uuid",
               "type": "string"
            },
            "mention_name": {
               "type": "string"
            },
            "name": {
               "type": "string"
            },
            "workspace2": {
               "$ref": "#/definitions/BasicWorkspaceInfo"
            }
         },
         "required": [
            "id",
            "mention_name",
            "name",
            "workspace2"
         ],
         "type": "object"
      },
      "Milestone": {
         "additionalProperties": false,
         "description": "A Milestone is a collection of Epics that represent a release or some other large initiative that your organization is working on.",
         "properties": {
            "app_url": {
               "description": "The Clubhouse application url for the Milestone.",
               "type": "string"
            },
            "categories": {
               "description": "An array of Categories attached to the Milestone.",
               "items": {
                  "$ref": "#/definitions/Category"
               },
               "type": "array"
            },
            "completed": {
               "description": "A true/false boolean indicating if the Milestone has been completed.",
               "type": "boolean"
            },
            "completed_at": {
               "description": "The time/date the Milestone was completed.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "completed_at_override": {
               "description": "A manual override for the time/date the Milestone was completed.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "created_at": {
               "description": "The time/date the Milestone was created.",
               "format": "date-time",
               "type": "string"
            },
            "description": {
               "description": "The Milestone's description.",
               "type": "string"
            },
            "entity_type": {
               "description": "A string description of this resource.",
               "type": "string"
            },
            "id": {
               "description": "The unique ID of the Milestone.",
               "format": "int64",
               "type": "integer"
            },
            "name": {
               "description": "The name of the Milestone.",
               "type": "string"
            },
            "position": {
               "description": "A number representing the position of the Milestone in relation to every other Milestone within the Organization.",
               "format": "int64",
               "type": "integer"
            },
            "started": {
               "description": "A true/false boolean indicating if the Milestone has been started.",
               "type": "boolean"
            },
            "started_at": {
               "description": "The time/date the Milestone was started.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "started_at_override": {
               "description": "A manual override for the time/date the Milestone was started.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "state": {
               "description": "The workflow state that the Milestone is in.",
               "type": "string"
            },
            "stats": {
               "$ref": "#/definitions/MilestoneStats"
            },
            "updated_at": {
               "description": "The time/date the Milestone was updated.",
               "format": "date-time",
               "type": "string"
            }
         },
         "required": [
            "app_url",
            "categories",
            "completed",
            "completed_at",
            "completed_at_override",
            "created_at",
            "description",
            "entity_type",
            "id",
            "name",
            "position",
            "started",
            "started_at",
            "started_at_override",
            "state",
            "updated_at"
         ],
         "type": "object"
      },
      "MilestoneStats": {
         "additionalProperties": false,
         "description": "A group of calculated values for this Milestone.",
         "properties": {
            "average_cycle_time": {
               "description": "The average cycle time (in seconds) of completed stories in this Milestone.",
               "format": "int64",
               "type": "integer"
            },
            "average_lead_time": {
               "description": "The average lead time (in seconds) of completed stories in this Milestone.",
               "format": "int64",
               "type": "integer"
            }
         },
         "type": "object"
      },
      "Profile": {
         "additionalProperties": false,
         "description": "A group of Member profile details.",
         "properties": {
            "deactivated": {
               "description": "A true/false boolean indicating whether the Member has been deactivated within Clubhouse.",
               "type": "boolean"
            },
            "display_icon": {
               "$ref": "#/definitions/Icon",
               "x-nullable": true
            },
            "email_address": {
               "description": "The primary email address of the Member with the Organization.",
               "type": "string",
               "x-nullable": true
            },
            "entity_type": {
               "description": "A string description of this resource.",
               "type": "string"
            },
            "gravatar_hash": {
               "description": "This is the gravatar hash associated with email_address.",
               "type": "string",
               "x-nullable": true
            },
            "id": {
               "description": "The unique identifier of the profile.",
               "format": "uuid",
               "type": "string"
            },
            "mention_name": {
               "description": "The Member's username within the Organization.",
               "type": "string"
            },
            "name": {
               "description": "The Member's name within the Organization.",
               "type": "string",
               "x-nullable": true
            },
            "two_factor_auth_activated": {
               "description": "If Two Factor Authentication is activated for this User.",
               "type": "boolean"
            }
         },
         "required": [
            "deactivated",
            "display_icon",
            "email_address",
            "entity_type",
            "gravatar_hash",
            "id",
            "mention_name",
            "name"
         ],
         "type": "object"
      },
      "Project": {
         "additionalProperties": false,
         "description": "Projects typically map to teams (such as Frontend, Backend, Mobile, Devops, etc) but can represent any open-ended product, component, or initiative.",
         "properties": {
            "abbreviation": {
               "description": "The Project abbreviation used in Story summaries. Should be kept to 3 characters at most.",
               "type": "string",
               "x-nullable": true
            },
            "app_url": {
               "description": "The Clubhouse application url for the Project.",
               "type": "string"
            },
            "archived": {
               "description": "True/false boolean indicating whether the Project is in an Archived state.",
               "type": "boolean"
            },
            "color": {
               "description": "The color associated with the Project in the Clubhouse member interface.",
               "type": "string",
               "x-nullable": true
            },
            "created_at": {
               "description": "The time/date that the Project was created.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "days_to_thermometer": {
               "description": "The number of days before the thermometer appears in the Story summary.",
               "format": "int64",
               "type": "integer"
            },
            "description": {
               "description": "The description of the Project.",
               "type": "string",
               "x-nullable": true
            },
            "entity_type": {
               "description": "A string description of this resource.",
               "type": "string"
            },
            "external_id": {
               "description": "This field can be set to another unique ID. In the case that the Project has been imported from another tool, the ID in the other tool can be indicated here.",
               "type": "string",
               "x-nullable": true
            },
            "follower_ids": {
               "description": "An array of UUIDs for any Members listed as Followers.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "id": {
               "description": "The unique ID of the Project.",
               "format": "int64",
               "type": "integer"
            },
            "iteration_length": {
               "description": "The number of weeks per iteration in this Project.",
               "format": "int64",
               "type": "integer"
            },
            "name": {
               "description": "The name of the Project",
               "type": "string"
            },
            "show_thermometer": {
               "description": "Configuration to enable or disable thermometers in the Story summary.",
               "type": "boolean"
            },
            "start_time": {
               "description": "The date at which the Project was started.",
               "format": "date-time",
               "type": "string"
            },
            "stats": {
               "$ref": "#/definitions/ProjectStats"
            },
            "team_id": {
               "description": "The ID of the team the project belongs to.",
               "format": "int64",
               "type": "integer"
            },
            "updated_at": {
               "description": "The time/date that the Project was last updated.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            }
         },
         "required": [
            "abbreviation",
            "app_url",
            "archived",
            "color",
            "created_at",
            "days_to_thermometer",
            "description",
            "entity_type",
            "external_id",
            "follower_ids",
            "id",
            "iteration_length",
            "name",
            "show_thermometer",
            "start_time",
            "stats",
            "team_id",
            "updated_at"
         ],
         "type": "object"
      },
      "ProjectStats": {
         "additionalProperties": false,
         "description": "A group of calculated values for this Project.",
         "properties": {
            "num_points": {
               "description": "The total number of points in this Project.",
               "format": "int64",
               "type": "integer"
            },
            "num_stories": {
               "description": "The total number of stories in this Project.",
               "format": "int64",
               "type": "integer"
            }
         },
         "required": [
            "num_points",
            "num_stories"
         ],
         "type": "object"
      },
      "PullRequest": {
         "additionalProperties": false,
         "description": "Corresponds to a GitHub Pull Request attached to a Clubhouse story.",
         "properties": {
            "branch_id": {
               "description": "The ID of the branch for the particular pull request.",
               "format": "int64",
               "type": "integer"
            },
            "branch_name": {
               "description": "The name of the branch for the particular pull request.",
               "type": "string"
            },
            "closed": {
               "description": "True/False boolean indicating whether the GitHub pull request has been closed.",
               "type": "boolean"
            },
            "created_at": {
               "description": "The time/date the pull request was created.",
               "format": "date-time",
               "type": "string"
            },
            "entity_type": {
               "description": "A string description of this resource.",
               "type": "string"
            },
            "id": {
               "description": "The unique ID associated with the pull request in Clubhouse.",
               "format": "int64",
               "type": "integer"
            },
            "num_added": {
               "description": "Number of lines added in the pull request, according to GitHub.",
               "format": "int64",
               "type": "integer"
            },
            "num_commits": {
               "description": "The number of commits on the pull request.",
               "format": "int64",
               "type": "integer",
               "x-nullable": true
            },
            "num_modified": {
               "description": "Number of lines modified in the pull request, according to GitHub.",
               "format": "int64",
               "type": "integer",
               "x-nullable": true
            },
            "num_removed": {
               "description": "Number of lines removed in the pull request, according to GitHub.",
               "format": "int64",
               "type": "integer"
            },
            "number": {
               "description": "The pull requests unique number ID in GitHub.",
               "format": "int64",
               "type": "integer"
            },
            "target_branch_id": {
               "description": "The ID of the target branch for the particular pull request.",
               "format": "int64",
               "type": "integer"
            },
            "target_branch_name": {
               "description": "The name of the target branch for the particular pull request.",
               "type": "string"
            },
            "title": {
               "description": "The title of the pull request.",
               "type": "string"
            },
            "updated_at": {
               "description": "The time/date the pull request was created.",
               "format": "date-time",
               "type": "string"
            },
            "url": {
               "description": "The URL for the pull request.",
               "type": "string"
            }
         },
         "required": [
            "branch_id",
            "branch_name",
            "closed",
            "created_at",
            "entity_type",
            "id",
            "num_added",
            "num_commits",
            "num_modified",
            "num_removed",
            "number",
            "target_branch_id",
            "target_branch_name",
            "title",
            "updated_at",
            "url"
         ],
         "type": "object"
      },
      "Reaction": {
         "additionalProperties": false,
         "description": "Emoji reaction on a comment.",
         "properties": {
            "emoji": {
               "description": "Emoji text of the reaction.",
               "type": "string"
            },
            "permission_ids": {
               "description": "Permissions who have reacted with this.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            }
         },
         "required": [
            "emoji",
            "permission_ids"
         ],
         "type": "object",
         "x-doc-skip": true
      },
      "Repository": {
         "additionalProperties": false,
         "description": "Repository refers to a GitHub repository.",
         "properties": {
            "created_at": {
               "description": "The time/date the Repository was created.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "entity_type": {
               "description": "A string description of this resource.",
               "type": "string"
            },
            "external_id": {
               "description": "The GitHub unique identifier for the Repository.",
               "type": "string",
               "x-nullable": true
            },
            "full_name": {
               "description": "The full name of the GitHub repository.",
               "type": "string",
               "x-nullable": true
            },
            "id": {
               "description": "The ID associated to the GitHub repository in Clubhouse.",
               "format": "int64",
               "type": "integer",
               "x-nullable": true
            },
            "name": {
               "description": "The shorthand name of the GitHub repository.",
               "type": "string",
               "x-nullable": true
            },
            "type": {
               "description": "The type of Repository. Currently this can only be \"github\".",
               "type": "string"
            },
            "updated_at": {
               "description": "The time/date the Repository was updated.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "url": {
               "description": "The URL of the Repository.",
               "type": "string",
               "x-nullable": true
            }
         },
         "required": [
            "created_at",
            "entity_type",
            "external_id",
            "full_name",
            "id",
            "name",
            "type",
            "updated_at",
            "url"
         ],
         "type": "object"
      },
      "Response8973244StoryContentsTasks": {
         "additionalProperties": false,
         "properties": {
            "complete": {
               "type": "boolean"
            },
            "description": {
               "type": "string"
            },
            "external_id": {
               "type": "string"
            },
            "owner_ids": {
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "position": {
               "format": "int64",
               "type": "integer"
            }
         },
         "required": [
            "description"
         ],
         "type": "object"
      },
      "Response8973283StoryContentsTasks": {
         "additionalProperties": false,
         "properties": {
            "complete": {
               "type": "boolean"
            },
            "description": {
               "type": "string"
            },
            "external_id": {
               "type": "string"
            },
            "owner_ids": {
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "position": {
               "format": "int64",
               "type": "integer"
            }
         },
         "required": [
            "description"
         ],
         "type": "object"
      },
      "Response8973299StoryContentsTasks": {
         "additionalProperties": false,
         "properties": {
            "complete": {
               "type": "boolean"
            },
            "description": {
               "type": "string"
            },
            "external_id": {
               "type": "string"
            },
            "owner_ids": {
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "position": {
               "format": "int64",
               "type": "integer"
            }
         },
         "required": [
            "description"
         ],
         "type": "object"
      },
      "Search": {
         "additionalProperties": false,
         "properties": {
            "include": {
               "enum": [
                  "cursors"
               ],
               "type": "string",
               "x-doc-skip": true
            },
            "next": {
               "description": "The next page token.",
               "type": "string",
               "x-doc-skip": true
            },
            "page_size": {
               "description": "The number of search results to include in a page. Minimum of 1 and maximum of 25.",
               "format": "int64",
               "type": "integer"
            },
            "query": {
               "description": "See our help center article on [search operators](https://help.clubhouse.io/hc/en-us/articles/360000046646-Search-Operators)",
               "type": "string"
            }
         },
         "required": [
            "query"
         ],
         "type": "object",
         "x-doc-skip": true
      },
      "SearchResults": {
         "additionalProperties": false,
         "description": "The results of the multi-entity search query.",
         "properties": {
            "epics": {
               "$ref": "#/definitions/EpicSearchResults"
            },
            "stories": {
               "$ref": "#/definitions/StorySearchResults"
            }
         },
         "required": [
            "epics",
            "stories"
         ],
         "type": "object"
      },
      "SearchStories": {
         "additionalProperties": false,
         "properties": {
            "archived": {
               "description": "A true/false boolean indicating whether the Story is in archived state.",
               "type": "boolean"
            },
            "completed_at_end": {
               "description": "Stories should have been completed before this date.",
               "format": "date-time",
               "type": "string"
            },
            "completed_at_start": {
               "description": "Stories should have been competed after this date.",
               "format": "date-time",
               "type": "string"
            },
            "created_at_end": {
               "description": "Stories should have been created before this date.",
               "format": "date-time",
               "type": "string"
            },
            "created_at_start": {
               "description": "Stories should have been created after this date.",
               "format": "date-time",
               "type": "string"
            },
            "deadline_end": {
               "description": "Stories should have a deadline before this date.",
               "format": "date-time",
               "type": "string"
            },
            "deadline_start": {
               "description": "Stories should have a deadline after this date.",
               "format": "date-time",
               "type": "string"
            },
            "epic_id": {
               "description": "The Epic IDs that may be associated with the Stories.",
               "format": "int64",
               "type": "integer",
               "x-nullable": true
            },
            "epic_ids": {
               "description": "The Epic IDs that may be associated with the Stories.",
               "items": {
                  "format": "int64",
                  "type": "integer"
               },
               "type": "array",
               "uniqueItems": true
            },
            "estimate": {
               "description": "The number of estimate points associate with the Stories.",
               "format": "int64",
               "type": "integer"
            },
            "external_id": {
               "description": "An ID or URL that references an external resource. Useful during imports.",
               "type": "string"
            },
            "iteration_id": {
               "description": "The Iteration ID that may be associated with the Stories.",
               "format": "int64",
               "type": "integer",
               "x-nullable": true
            },
            "iteration_ids": {
               "description": "The Iteration IDs that may be associated with the Stories.",
               "items": {
                  "format": "int64",
                  "type": "integer"
               },
               "type": "array",
               "uniqueItems": true
            },
            "label_ids": {
               "description": "The Label IDs that may be associated with the Stories.",
               "items": {
                  "format": "int64",
                  "type": "integer"
               },
               "type": "array",
               "uniqueItems": true
            },
            "label_name": {
               "description": "The name of any associated Labels.",
               "type": "string"
            },
            "owner_id": {
               "description": "An array of UUIDs for any Users who may be Owners of the Stories.",
               "format": "uuid",
               "type": "string",
               "x-nullable": true
            },
            "owner_ids": {
               "description": "An array of UUIDs for any Users who may be Owners of the Stories.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array",
               "uniqueItems": true
            },
            "project_id": {
               "description": "The IDs for the Projects the Stories may be assigned to.",
               "format": "int64",
               "type": "integer"
            },
            "project_ids": {
               "description": "The IDs for the Projects the Stories may be assigned to.",
               "items": {
                  "format": "int64",
                  "type": "integer"
               },
               "type": "array",
               "uniqueItems": true
            },
            "requested_by_id": {
               "description": "The UUID of any Users who may have requested the Stories.",
               "format": "uuid",
               "type": "string"
            },
            "story_type": {
               "description": "The type of Stories that you want returned.",
               "enum": [
                  "bug",
                  "chore",
                  "feature"
               ],
               "type": "string"
            },
            "updated_at_end": {
               "description": "Stories should have been updated before this date.",
               "format": "date-time",
               "type": "string"
            },
            "updated_at_start": {
               "description": "Stories should have been updated after this date.",
               "format": "date-time",
               "type": "string"
            },
            "workflow_state_id": {
               "description": "The unique IDs of the specific Workflow States that the Stories should be in.",
               "format": "int64",
               "type": "integer"
            },
            "workflow_state_types": {
               "description": "The type of Workflow State the Stories may be in.",
               "items": {
                  "enum": [
                     "done",
                     "started",
                     "unstarted"
                  ],
                  "type": "string"
               },
               "type": "array"
            }
         },
         "type": "object",
         "x-doc-skip": true
      },
      "Story": {
         "additionalProperties": false,
         "description": "Stories are the standard unit of work in Clubhouse and represent individual features, bugs, and chores.",
         "properties": {
            "app_url": {
               "description": "The Clubhouse application url for the Story.",
               "type": "string"
            },
            "archived": {
               "description": "True if the story has been archived or not.",
               "type": "boolean"
            },
            "blocked": {
               "description": "A true/false boolean indicating if the Story is currently blocked.",
               "type": "boolean"
            },
            "blocker": {
               "description": "A true/false boolean indicating if the Story is currently a blocker of another story.",
               "type": "boolean"
            },
            "branches": {
               "description": "An array of Git branches attached to the story.",
               "items": {
                  "$ref": "#/definitions/Branch"
               },
               "type": "array"
            },
            "comments": {
               "description": "An array of comments attached to the story.",
               "items": {
                  "$ref": "#/definitions/Comment"
               },
               "type": "array"
            },
            "commits": {
               "description": "An array of commits attached to the story.",
               "items": {
                  "$ref": "#/definitions/Commit"
               },
               "type": "array"
            },
            "completed": {
               "description": "A true/false boolean indicating if the Story has been completed.",
               "type": "boolean"
            },
            "completed_at": {
               "description": "The time/date the Story was completed.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "completed_at_override": {
               "description": "A manual override for the time/date the Story was completed.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "created_at": {
               "description": "The time/date the Story was created.",
               "format": "date-time",
               "type": "string"
            },
            "cycle_time": {
               "description": "The cycle time (in seconds) of this story when complete.",
               "format": "int64",
               "type": "integer"
            },
            "deadline": {
               "description": "The due date of the story.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "description": {
               "description": "The description of the story.",
               "type": "string"
            },
            "entity_type": {
               "description": "A string description of this resource.",
               "type": "string"
            },
            "epic_id": {
               "description": "The ID of the epic the story belongs to.",
               "format": "int64",
               "type": "integer",
               "x-nullable": true
            },
            "estimate": {
               "description": "The numeric point estimate of the story. Can also be null, which means unestimated.",
               "format": "int64",
               "type": "integer",
               "x-nullable": true
            },
            "external_id": {
               "description": "This field can be set to another unique ID. In the case that the Story has been imported from another tool, the ID in the other tool can be indicated here.",
               "type": "string",
               "x-nullable": true
            },
            "external_tickets": {
               "description": "An array of External Tickets associated with a Story",
               "items": {
                  "$ref": "#/definitions/ExternalTicket"
               },
               "type": "array"
            },
            "files": {
               "description": "An array of files attached to the story.",
               "items": {
                  "$ref": "#/definitions/File"
               },
               "type": "array"
            },
            "follower_ids": {
               "description": "An array of UUIDs for any Members listed as Followers.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "group_mention_ids": {
               "description": "An array of Group IDs that have been mentioned in the Story description.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "id": {
               "description": "The unique ID of the Story.",
               "format": "int64",
               "type": "integer"
            },
            "iteration_id": {
               "description": "The ID of the iteration the story belongs to.",
               "format": "int64",
               "type": "integer",
               "x-nullable": true
            },
            "labels": {
               "description": "An array of labels attached to the story.",
               "items": {
                  "$ref": "#/definitions/Label"
               },
               "type": "array"
            },
            "lead_time": {
               "description": "The lead time (in seconds) of this story when complete.",
               "format": "int64",
               "type": "integer"
            },
            "linked_files": {
               "description": "An array of linked files attached to the story.",
               "items": {
                  "$ref": "#/definitions/LinkedFile"
               },
               "type": "array"
            },
            "member_mention_ids": {
               "description": "An array of Member IDs that have been mentioned in the Story description.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "mention_ids": {
               "description": "Deprecated: use member_mention_ids.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "moved_at": {
               "description": "The time/date the Story was last changed workflow-state.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "name": {
               "description": "The name of the story.",
               "type": "string"
            },
            "owner_ids": {
               "description": "An array of UUIDs of the owners of this story.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "position": {
               "description": "A number representing the position of the story in relation to every other story in the current project.",
               "format": "int64",
               "type": "integer"
            },
            "previous_iteration_ids": {
               "description": "The IDs of the iteration the story belongs to.",
               "items": {
                  "format": "int64",
                  "type": "integer"
               },
               "type": "array"
            },
            "project_id": {
               "description": "The ID of the project the story belongs to.",
               "format": "int64",
               "type": "integer"
            },
            "pull_requests": {
               "description": "An array of Pull/Merge Requests attached to the story.",
               "items": {
                  "$ref": "#/definitions/PullRequest"
               },
               "type": "array"
            },
            "requested_by_id": {
               "description": "The ID of the Member that requested the story.",
               "format": "uuid",
               "type": "string"
            },
            "started": {
               "description": "A true/false boolean indicating if the Story has been started.",
               "type": "boolean"
            },
            "started_at": {
               "description": "The time/date the Story was started.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "started_at_override": {
               "description": "A manual override for the time/date the Story was started.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "story_links": {
               "description": "An array of story links attached to the Story.",
               "items": {
                  "$ref": "#/definitions/TypedStoryLink"
               },
               "type": "array"
            },
            "story_type": {
               "description": "The type of story (feature, bug, chore).",
               "type": "string"
            },
            "support_tickets": {
               "items": {
                  "$ref": "#/definitions/SupportTicket"
               },
               "type": "array",
               "x-doc-skip": true
            },
            "tasks": {
               "description": "An array of tasks connected to the story.",
               "items": {
                  "$ref": "#/definitions/Task"
               },
               "type": "array"
            },
            "updated_at": {
               "description": "The time/date the Story was updated.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "workflow_state_id": {
               "description": "The ID of the workflow state the story is currently in.",
               "format": "int64",
               "type": "integer"
            }
         },
         "required": [
            "app_url",
            "archived",
            "blocked",
            "blocker",
            "branches",
            "comments",
            "commits",
            "completed",
            "completed_at",
            "completed_at_override",
            "created_at",
            "deadline",
            "description",
            "entity_type",
            "epic_id",
            "estimate",
            "external_id",
            "external_tickets",
            "files",
            "follower_ids",
            "group_mention_ids",
            "id",
            "iteration_id",
            "labels",
            "linked_files",
            "member_mention_ids",
            "mention_ids",
            "moved_at",
            "name",
            "owner_ids",
            "position",
            "previous_iteration_ids",
            "project_id",
            "pull_requests",
            "requested_by_id",
            "started",
            "started_at",
            "started_at_override",
            "story_links",
            "story_type",
            "support_tickets",
            "tasks",
            "updated_at",
            "workflow_state_id"
         ],
         "type": "object"
      },
      "StoryContents": {
         "additionalProperties": false,
         "description": "A container entity for the attributes this template should populate.",
         "properties": {
            "deadline": {
               "description": "The due date of the story.",
               "format": "date-time",
               "type": "string"
            },
            "description": {
               "description": "The description of the story.",
               "type": "string"
            },
            "entity_type": {
               "description": "A string description of this resource.",
               "type": "string"
            },
            "epic_id": {
               "description": "The ID of the epic the story belongs to.",
               "format": "int64",
               "type": "integer"
            },
            "estimate": {
               "description": "The numeric point estimate of the story. Can also be null, which means unestimated.",
               "format": "int64",
               "type": "integer"
            },
            "external_tickets": {
               "description": "An array of external tickets connected to the story.",
               "items": {
                  "$ref": "#/definitions/ExternalTicket"
               },
               "type": "array"
            },
            "files": {
               "description": "An array of files attached to the story.",
               "items": {
                  "$ref": "#/definitions/File"
               },
               "type": "array"
            },
            "follower_ids": {
               "description": "An array of UUIDs for any Members listed as Followers.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "iteration_id": {
               "description": "The ID of the iteration the story belongs to.",
               "format": "int64",
               "type": "integer"
            },
            "labels": {
               "description": "An array of labels attached to the story.",
               "items": {
                  "$ref": "#/definitions/Label"
               },
               "type": "array"
            },
            "linked_files": {
               "description": "An array of linked files attached to the story.",
               "items": {
                  "$ref": "#/definitions/LinkedFile"
               },
               "type": "array"
            },
            "name": {
               "description": "The name of the story.",
               "type": "string"
            },
            "owner_ids": {
               "description": "An array of UUIDs of the owners of this story.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "project_id": {
               "description": "The ID of the project the story belongs to.",
               "format": "int64",
               "type": "integer"
            },
            "story_type": {
               "description": "The type of story (feature, bug, chore).",
               "type": "string"
            },
            "tasks": {
               "description": "An array of tasks connected to the story.",
               "items": {
                  "$ref": "#/definitions/Response8973244StoryContentsTasks"
               },
               "type": "array"
            },
            "workflow_state_id": {
               "description": "The ID of the workflow state the story is currently in.",
               "format": "int64",
               "type": "integer"
            }
         },
         "type": "object"
      },
      "StoryLink": {
         "additionalProperties": false,
         "description": "Story links allow you create semantic relationships between two stories. Relationship types are relates to, blocks / blocked by, and duplicates / is duplicated by. The format is `subject -> link -> object`, or for example \"story 5 blocks story 6\".",
         "properties": {
            "created_at": {
               "description": "The time/date when the Story Link was created.",
               "format": "date-time",
               "type": "string"
            },
            "entity_type": {
               "description": "A string description of this resource.",
               "type": "string"
            },
            "id": {
               "description": "The unique identifier of the Story Link.",
               "format": "int64",
               "type": "integer"
            },
            "object_id": {
               "description": "The ID of the object Story.",
               "format": "int64",
               "type": "integer"
            },
            "subject_id": {
               "description": "The ID of the subject Story.",
               "format": "int64",
               "type": "integer"
            },
            "updated_at": {
               "description": "The time/date when the Story Link was last updated.",
               "format": "date-time",
               "type": "string"
            },
            "verb": {
               "description": "How the subject Story acts on the object Story. This can be \"blocks\", \"duplicates\", or \"relates to\".",
               "type": "string"
            }
         },
         "required": [
            "created_at",
            "entity_type",
            "id",
            "object_id",
            "subject_id",
            "updated_at",
            "verb"
         ],
         "type": "object"
      },
      "StorySearchResults": {
         "additionalProperties": false,
         "description": "The results of the Story search query.",
         "properties": {
            "cursors": {
               "items": {
                  "type": "string"
               },
               "type": "array"
            },
            "data": {
               "description": "A list of search results.",
               "items": {
                  "$ref": "#/definitions/Story"
               },
               "type": "array"
            },
            "next": {
               "description": "The URL path and query string for the next page of search results.",
               "type": "string",
               "x-nullable": true
            },
            "total": {
               "description": "The total number of matches for the search query. The first 1000 matches can be paged through via the API.",
               "format": "int64",
               "type": "integer"
            }
         },
         "required": [
            "data",
            "next",
            "total"
         ],
         "type": "object"
      },
      "StorySlim": {
         "additionalProperties": false,
         "description": "StorySlim represents the same resource as a Story, but is more light-weight. For certain fields it provides ids rather than full resources (e.g., `comment_ids` and `file_ids`) and it also excludes certain aggregate values (e.g., `cycle_time`). Use the [Get Story](#Get-Story) endpoint to fetch the unabridged payload for a Story.",
         "properties": {
            "app_url": {
               "description": "The Clubhouse application url for the Story.",
               "type": "string"
            },
            "archived": {
               "description": "True if the story has been archived or not.",
               "type": "boolean"
            },
            "blocked": {
               "description": "A true/false boolean indicating if the Story is currently blocked.",
               "type": "boolean"
            },
            "blocker": {
               "description": "A true/false boolean indicating if the Story is currently a blocker of another story.",
               "type": "boolean"
            },
            "comment_ids": {
               "description": "An array of IDs of Comments attached to the story.",
               "items": {
                  "format": "int64",
                  "type": "integer"
               },
               "type": "array"
            },
            "completed": {
               "description": "A true/false boolean indicating if the Story has been completed.",
               "type": "boolean"
            },
            "completed_at": {
               "description": "The time/date the Story was completed.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "completed_at_override": {
               "description": "A manual override for the time/date the Story was completed.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "created_at": {
               "description": "The time/date the Story was created.",
               "format": "date-time",
               "type": "string"
            },
            "deadline": {
               "description": "The due date of the story.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "entity_type": {
               "description": "A string description of this resource.",
               "type": "string"
            },
            "epic_id": {
               "description": "The ID of the epic the story belongs to.",
               "format": "int64",
               "type": "integer",
               "x-nullable": true
            },
            "estimate": {
               "description": "The numeric point estimate of the story. Can also be null, which means unestimated.",
               "format": "int64",
               "type": "integer",
               "x-nullable": true
            },
            "external_id": {
               "description": "This field can be set to another unique ID. In the case that the Story has been imported from another tool, the ID in the other tool can be indicated here.",
               "type": "string",
               "x-nullable": true
            },
            "external_tickets": {
               "description": "An array of External Tickets associated with a Story",
               "items": {
                  "$ref": "#/definitions/ExternalTicket"
               },
               "type": "array"
            },
            "file_ids": {
               "description": "An array of IDs of Files attached to the story.",
               "items": {
                  "format": "int64",
                  "type": "integer"
               },
               "type": "array"
            },
            "follower_ids": {
               "description": "An array of UUIDs for any Members listed as Followers.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "group_mention_ids": {
               "description": "An array of Group IDs that have been mentioned in the Story description.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "id": {
               "description": "The unique ID of the Story.",
               "format": "int64",
               "type": "integer"
            },
            "iteration_id": {
               "description": "The ID of the iteration the story belongs to.",
               "format": "int64",
               "type": "integer",
               "x-nullable": true
            },
            "labels": {
               "description": "An array of labels attached to the story.",
               "items": {
                  "$ref": "#/definitions/Label"
               },
               "type": "array"
            },
            "linked_file_ids": {
               "description": "An array of IDs of LinkedFiles attached to the story.",
               "items": {
                  "format": "int64",
                  "type": "integer"
               },
               "type": "array"
            },
            "member_mention_ids": {
               "description": "An array of Member IDs that have been mentioned in the Story description.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "mention_ids": {
               "description": "Deprecated: use member_mention_ids.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "moved_at": {
               "description": "The time/date the Story was last changed workflow-state.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "name": {
               "description": "The name of the story.",
               "type": "string"
            },
            "owner_ids": {
               "description": "An array of UUIDs of the owners of this story.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "position": {
               "description": "A number representing the position of the story in relation to every other story in the current project.",
               "format": "int64",
               "type": "integer"
            },
            "previous_iteration_ids": {
               "description": "The IDs of the iteration the story belongs to.",
               "items": {
                  "format": "int64",
                  "type": "integer"
               },
               "type": "array"
            },
            "project_id": {
               "description": "The ID of the project the story belongs to.",
               "format": "int64",
               "type": "integer"
            },
            "requested_by_id": {
               "description": "The ID of the Member that requested the story.",
               "format": "uuid",
               "type": "string"
            },
            "started": {
               "description": "A true/false boolean indicating if the Story has been started.",
               "type": "boolean"
            },
            "started_at": {
               "description": "The time/date the Story was started.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "started_at_override": {
               "description": "A manual override for the time/date the Story was started.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "story_links": {
               "description": "An array of story links attached to the Story.",
               "items": {
                  "$ref": "#/definitions/TypedStoryLink"
               },
               "type": "array"
            },
            "story_type": {
               "description": "The type of story (feature, bug, chore).",
               "type": "string"
            },
            "support_tickets": {
               "items": {
                  "$ref": "#/definitions/SupportTicket"
               },
               "type": "array",
               "x-doc-skip": true
            },
            "task_ids": {
               "description": "An array of IDs of Tasks attached to the story.",
               "items": {
                  "format": "int64",
                  "type": "integer"
               },
               "type": "array"
            },
            "updated_at": {
               "description": "The time/date the Story was updated.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "workflow_state_id": {
               "description": "The ID of the workflow state the story is currently in.",
               "format": "int64",
               "type": "integer"
            }
         },
         "required": [
            "app_url",
            "archived",
            "blocked",
            "blocker",
            "comment_ids",
            "completed",
            "completed_at",
            "completed_at_override",
            "created_at",
            "deadline",
            "entity_type",
            "epic_id",
            "estimate",
            "external_id",
            "external_tickets",
            "file_ids",
            "follower_ids",
            "group_mention_ids",
            "id",
            "iteration_id",
            "labels",
            "linked_file_ids",
            "member_mention_ids",
            "mention_ids",
            "moved_at",
            "name",
            "owner_ids",
            "position",
            "previous_iteration_ids",
            "project_id",
            "requested_by_id",
            "started",
            "started_at",
            "started_at_override",
            "story_links",
            "story_type",
            "support_tickets",
            "task_ids",
            "updated_at",
            "workflow_state_id"
         ],
         "type": "object"
      },
      "SupportTicket": {
         "additionalProperties": false,
         "properties": {
            "epic_ids": {
               "items": {
                  "format": "double",
                  "type": "number"
               },
               "type": "array"
            },
            "external_id": {
               "type": "string"
            },
            "external_url": {
               "type": "string"
            },
            "id": {
               "format": "uuid",
               "type": "string"
            },
            "story_ids": {
               "items": {
                  "format": "double",
                  "type": "number"
               },
               "type": "array"
            }
         },
         "required": [
            "epic_ids",
            "external_id",
            "id",
            "story_ids"
         ],
         "type": "object",
         "x-doc-skip": true
      },
      "Task": {
         "additionalProperties": false,
         "properties": {
            "complete": {
               "description": "True/false boolean indicating whether the Task has been completed.",
               "type": "boolean"
            },
            "completed_at": {
               "description": "The time/date the Task was completed.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "created_at": {
               "description": "The time/date the Task was created.",
               "format": "date-time",
               "type": "string"
            },
            "description": {
               "description": "Full text of the Task.",
               "type": "string"
            },
            "entity_type": {
               "description": "A string description of this resource.",
               "type": "string"
            },
            "external_id": {
               "description": "This field can be set to another unique ID. In the case that the Task has been imported from another tool, the ID in the other tool can be indicated here.",
               "type": "string",
               "x-nullable": true
            },
            "group_mention_ids": {
               "description": "An array of UUIDs of Groups mentioned in this Task.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "id": {
               "description": "The unique ID of the Task.",
               "format": "int64",
               "type": "integer"
            },
            "member_mention_ids": {
               "description": "An array of UUIDs of Members mentioned in this Task.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "mention_ids": {
               "description": "Deprecated: use member_mention_ids.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "owner_ids": {
               "description": "An array of UUIDs of the Owners of this Task.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "position": {
               "description": "The number corresponding to the Task's position within a list of Tasks on a Story.",
               "format": "int64",
               "type": "integer"
            },
            "story_id": {
               "description": "The unique identifier of the parent Story.",
               "format": "int64",
               "type": "integer"
            },
            "updated_at": {
               "description": "The time/date the Task was updated.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            }
         },
         "required": [
            "complete",
            "completed_at",
            "created_at",
            "description",
            "entity_type",
            "external_id",
            "group_mention_ids",
            "id",
            "member_mention_ids",
            "mention_ids",
            "owner_ids",
            "position",
            "story_id",
            "updated_at"
         ],
         "type": "object"
      },
      "Team": {
         "additionalProperties": false,
         "description": "Group of Projects with the same Workflow.",
         "properties": {
            "created_at": {
               "description": "The time/date the Team was created.",
               "format": "date-time",
               "type": "string"
            },
            "description": {
               "description": "The description of the Team.",
               "type": "string"
            },
            "entity_type": {
               "description": "A string description of this resource.",
               "type": "string"
            },
            "id": {
               "description": "The unique identifier of the Team.",
               "format": "int64",
               "type": "integer"
            },
            "name": {
               "description": "The name of the Team.",
               "type": "string"
            },
            "position": {
               "description": "A number representing the position of the Team in relation to every other Team within the Organization.",
               "format": "double",
               "type": "number"
            },
            "project_ids": {
               "description": "An array of IDs of projects within the Team.",
               "items": {
                  "format": "double",
                  "type": "number"
               },
               "type": "array"
            },
            "updated_at": {
               "description": "The time/date the Team was last updated.",
               "format": "date-time",
               "type": "string"
            },
            "workflow": {
               "$ref": "#/definitions/Workflow"
            }
         },
         "required": [
            "created_at",
            "description",
            "entity_type",
            "id",
            "name",
            "position",
            "project_ids",
            "updated_at",
            "workflow"
         ],
         "type": "object"
      },
      "ThreadedComment": {
         "additionalProperties": false,
         "description": "Comments associated with Epic Discussions.",
         "properties": {
            "app_url": {
               "description": "The Clubhouse application url for the Comment.",
               "type": "string"
            },
            "author_id": {
               "description": "The unique ID of the Member that authored the Comment.",
               "format": "uuid",
               "type": "string"
            },
            "comments": {
               "description": "A nested array of threaded comments.",
               "items": {
                  "$ref": "#/definitions/ThreadedComment"
               },
               "type": "array"
            },
            "created_at": {
               "description": "The time/date the Comment was created.",
               "format": "date-time",
               "type": "string"
            },
            "deleted": {
               "description": "True/false boolean indicating whether the Comment is deleted.",
               "type": "boolean"
            },
            "entity_type": {
               "description": "A string description of this resource.",
               "type": "string"
            },
            "external_id": {
               "description": "This field can be set to another unique ID. In the case that the Comment has been imported from another tool, the ID in the other tool can be indicated here.",
               "type": "string",
               "x-nullable": true
            },
            "group_mention_ids": {
               "description": "An array of Group IDs that have been mentioned in this Comment.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "id": {
               "description": "The unique ID of the Comment.",
               "format": "int64",
               "type": "integer"
            },
            "member_mention_ids": {
               "description": "An array of Member IDs that have been mentioned in this Comment.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "mention_ids": {
               "description": "Deprecated: use member_mention_ids.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "text": {
               "description": "The text of the Comment.",
               "type": "string"
            },
            "updated_at": {
               "description": "The time/date the Comment was updated.",
               "format": "date-time",
               "type": "string"
            }
         },
         "required": [
            "app_url",
            "author_id",
            "comments",
            "created_at",
            "deleted",
            "entity_type",
            "external_id",
            "group_mention_ids",
            "id",
            "member_mention_ids",
            "mention_ids",
            "text",
            "updated_at"
         ],
         "type": "object"
      },
      "TypedStoryLink": {
         "additionalProperties": false,
         "description": "The type of Story Link. The string can be subject or object. ",
         "properties": {
            "created_at": {
               "description": "The time/date when the Story Link was created.",
               "format": "date-time",
               "type": "string"
            },
            "entity_type": {
               "description": "A string description of this resource.",
               "type": "string"
            },
            "id": {
               "description": "The unique identifier of the Story Link.",
               "format": "int64",
               "type": "integer"
            },
            "object_id": {
               "description": "The ID of the object Story.",
               "format": "int64",
               "type": "integer"
            },
            "subject_id": {
               "description": "The ID of the subject Story.",
               "format": "int64",
               "type": "integer"
            },
            "type": {
               "description": "This indicates whether the Story is the subject or object in the Story Link.",
               "type": "string"
            },
            "updated_at": {
               "description": "The time/date when the Story Link was last updated.",
               "format": "date-time",
               "type": "string"
            },
            "verb": {
               "description": "How the subject Story acts on the object Story. This can be \"blocks\", \"duplicates\", or \"relates to\".",
               "type": "string"
            }
         },
         "required": [
            "created_at",
            "entity_type",
            "id",
            "object_id",
            "subject_id",
            "type",
            "updated_at",
            "verb"
         ],
         "type": "object"
      },
      "UpdateCategory": {
         "additionalProperties": false,
         "properties": {
            "archived": {
               "description": "A true/false boolean indicating if the Category has been archived.",
               "type": "boolean"
            },
            "color": {
               "description": "The hex color to be displayed with the Category (for example, \"#ff0000\").",
               "type": "string",
               "x-nullable": true
            },
            "name": {
               "description": "The new name of the Category.",
               "type": "string"
            }
         },
         "type": "object",
         "x-doc-skip": true
      },
      "UpdateComment": {
         "additionalProperties": false,
         "properties": {
            "text": {
               "description": "The updated comment text.",
               "type": "string"
            }
         },
         "required": [
            "text"
         ],
         "type": "object",
         "x-doc-skip": true
      },
      "UpdateEntityTemplate": {
         "additionalProperties": false,
         "description": "Request parameters for changing either a template's name or any of\n  the attributes it is designed to pre-populate.",
         "properties": {
            "name": {
               "description": "The updated template name.",
               "type": "string"
            },
            "story_contents": {
               "$ref": "#/definitions/CreateStoryContents"
            }
         },
         "type": "object"
      },
      "UpdateEpic": {
         "additionalProperties": false,
         "properties": {
            "after_id": {
               "description": "The ID of the Epic we want to move this Epic after.",
               "format": "int64",
               "type": "integer"
            },
            "archived": {
               "description": "A true/false boolean indicating whether the Epic is in archived state.",
               "type": "boolean"
            },
            "before_id": {
               "description": "The ID of the Epic we want to move this Epic before.",
               "format": "int64",
               "type": "integer"
            },
            "completed_at_override": {
               "description": "A manual override for the time/date the Epic was completed.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "deadline": {
               "description": "The Epic's deadline.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "description": {
               "description": "The Epic's description.",
               "type": "string"
            },
            "epic_state_id": {
               "description": "The ID of the Epic State.",
               "format": "int64",
               "type": "integer"
            },
            "follower_ids": {
               "description": "An array of UUIDs for any Members you want to add as Followers on this Epic.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "labels": {
               "description": "An array of Labels attached to the Epic.",
               "items": {
                  "$ref": "#/definitions/CreateLabelParams"
               },
               "type": "array"
            },
            "milestone_id": {
               "description": "The ID of the Milestone this Epic is related to.",
               "format": "int64",
               "type": "integer",
               "x-nullable": true
            },
            "name": {
               "description": "The Epic's name.",
               "type": "string"
            },
            "owner_ids": {
               "description": "An array of UUIDs for any members you want to add as Owners on this Epic.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "requested_by_id": {
               "description": "The ID of the member that requested the epic.",
               "format": "uuid",
               "type": "string"
            },
            "started_at_override": {
               "description": "A manual override for the time/date the Epic was started.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "state": {
               "description": "`Deprecated` The Epic's state (to do, in progress, or done); will be ignored when `epic_state_id` is set.",
               "enum": [
                  "done",
                  "in progress",
                  "to do"
               ],
               "type": "string"
            }
         },
         "type": "object",
         "x-doc-skip": true
      },
      "UpdateFile": {
         "additionalProperties": false,
         "properties": {
            "created_at": {
               "description": "The time/date that the file was uploaded.",
               "format": "date-time",
               "type": "string"
            },
            "description": {
               "description": "The description of the file.",
               "type": "string"
            },
            "external_id": {
               "description": "An additional ID that you may wish to assign to the file.",
               "type": "string"
            },
            "name": {
               "description": "The name of the file.",
               "type": "string"
            },
            "updated_at": {
               "description": "The time/date that the file was last updated.",
               "format": "date-time",
               "type": "string"
            },
            "uploader_id": {
               "description": "The unique ID assigned to the Member who uploaded the file to Clubhouse.",
               "format": "uuid",
               "type": "string"
            }
         },
         "type": "object",
         "x-doc-skip": true
      },
      "UpdateGroup": {
         "additionalProperties": false,
         "properties": {
            "archived": {
               "description": "Whether or not this Group is archived.",
               "type": "boolean",
               "x-nullable": true
            },
            "description": {
               "description": "The description of this Group.",
               "type": "string"
            },
            "display_icon_id": {
               "description": "The Icon id for the avatar of this Group.",
               "format": "uuid",
               "type": "string",
               "x-nullable": true
            },
            "member_ids": {
               "description": "The Member ids to add to this Group.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array",
               "uniqueItems": true
            },
            "mention_name": {
               "description": "The mention name of this Group.",
               "type": "string"
            },
            "name": {
               "description": "The name of this Group.",
               "type": "string"
            }
         },
         "type": "object"
      },
      "UpdateIteration": {
         "additionalProperties": false,
         "properties": {
            "description": {
               "description": "The description of the Iteration.",
               "type": "string"
            },
            "end_date": {
               "description": "The date this Iteration ends, e.g. 2019-07-05.",
               "type": "string"
            },
            "follower_ids": {
               "description": "An array of UUIDs for any Members you want to add as Followers.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "labels": {
               "description": "An array of Labels attached to the Iteration.",
               "items": {
                  "$ref": "#/definitions/CreateLabelParams"
               },
               "type": "array"
            },
            "name": {
               "description": "The name of this Iteration",
               "type": "string"
            },
            "start_date": {
               "description": "The date this Iteration begins, e.g. 2019-07-01",
               "type": "string"
            }
         },
         "type": "object"
      },
      "UpdateLabel": {
         "additionalProperties": false,
         "properties": {
            "archived": {
               "description": "A true/false boolean indicating if the Label has been archived.",
               "type": "boolean"
            },
            "color": {
               "description": "The hex color to be displayed with the Label (for example, \"#ff0000\").",
               "type": "string",
               "x-nullable": true
            },
            "description": {
               "description": "The new description of the label.",
               "type": "string"
            },
            "name": {
               "description": "The new name of the label.",
               "type": "string"
            }
         },
         "type": "object",
         "x-doc-skip": true
      },
      "UpdateLinkedFile": {
         "additionalProperties": false,
         "properties": {
            "description": {
               "description": "The description of the file.",
               "type": "string"
            },
            "name": {
               "description": "The name of the file.",
               "type": "string"
            },
            "size": {
               "description": "The filesize, if the integration provided it.",
               "format": "int64",
               "type": "integer"
            },
            "story_id": {
               "description": "The ID of the linked story.",
               "format": "int64",
               "type": "integer"
            },
            "thumbnail_url": {
               "description": "The URL of the thumbnail, if the integration provided it.",
               "type": "string"
            },
            "type": {
               "description": "The integration type of the file (e.g. google, dropbox, box).",
               "enum": [
                  "box",
                  "dropbox",
                  "google",
                  "onedrive",
                  "url"
               ],
               "type": "string"
            },
            "uploader_id": {
               "description": "The UUID of the member that uploaded the file.",
               "format": "uuid",
               "type": "string"
            },
            "url": {
               "description": "The URL of linked file.",
               "type": "string"
            }
         },
         "type": "object",
         "x-doc-skip": true
      },
      "UpdateMilestone": {
         "additionalProperties": false,
         "properties": {
            "after_id": {
               "description": "The ID of the Milestone we want to move this Milestone after.",
               "format": "int64",
               "type": "integer"
            },
            "before_id": {
               "description": "The ID of the Milestone we want to move this Milestone before.",
               "format": "int64",
               "type": "integer"
            },
            "categories": {
               "description": "An array of IDs of Categories attached to the Milestone.",
               "items": {
                  "$ref": "#/definitions/CreateCategoryParams"
               },
               "type": "array"
            },
            "completed_at_override": {
               "description": "A manual override for the time/date the Milestone was completed.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "description": {
               "description": "The Milestone's description.",
               "type": "string"
            },
            "name": {
               "description": "The name of the Milestone.",
               "type": "string"
            },
            "started_at_override": {
               "description": "A manual override for the time/date the Milestone was started.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "state": {
               "description": "The workflow state that the Milestone is in.",
               "enum": [
                  "done",
                  "in progress",
                  "to do"
               ],
               "type": "string"
            }
         },
         "type": "object",
         "x-doc-skip": true
      },
      "UpdateProject": {
         "additionalProperties": false,
         "properties": {
            "abbreviation": {
               "description": "The Project abbreviation used in Story summaries. Should be kept to 3 characters at most.",
               "type": "string"
            },
            "archived": {
               "description": "A true/false boolean indicating whether the Story is in archived state.",
               "type": "boolean"
            },
            "color": {
               "description": "The color that represents the Project in the UI.",
               "type": "string"
            },
            "days_to_thermometer": {
               "description": "The number of days before the thermometer appears in the Story summary.",
               "format": "int64",
               "type": "integer"
            },
            "description": {
               "description": "The Project's description.",
               "type": "string"
            },
            "follower_ids": {
               "description": "An array of UUIDs for any Members you want to add as Followers.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            },
            "name": {
               "description": "The Project's name.",
               "type": "string"
            },
            "show_thermometer": {
               "description": "Configuration to enable or disable thermometers in the Story summary.",
               "type": "boolean"
            },
            "team_id": {
               "description": "The ID of the team the project belongs to.",
               "format": "int64",
               "type": "integer"
            }
         },
         "type": "object",
         "x-doc-skip": true
      },
      "UpdateStories": {
         "additionalProperties": false,
         "properties": {
            "after_id": {
               "description": "The ID of the story that the stories are to be moved below.",
               "format": "int64",
               "type": "integer"
            },
            "archived": {
               "description": "If the Stories should be archived or not.",
               "type": "boolean"
            },
            "before_id": {
               "description": "The ID of the story that the stories are to be moved before.",
               "format": "int64",
               "type": "integer"
            },
            "deadline": {
               "description": "The due date of the story.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "epic_id": {
               "description": "The ID of the epic the story belongs to.",
               "format": "int64",
               "type": "integer",
               "x-nullable": true
            },
            "estimate": {
               "description": "The numeric point estimate of the story. Can also be null, which means unestimated.",
               "format": "int64",
               "type": "integer",
               "x-nullable": true
            },
            "follower_ids_add": {
               "description": "The UUIDs of the new followers to be added.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array",
               "uniqueItems": true
            },
            "follower_ids_remove": {
               "description": "The UUIDs of the followers to be removed.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array",
               "uniqueItems": true
            },
            "iteration_id": {
               "description": "The ID of the iteration the story belongs to.",
               "format": "int64",
               "type": "integer",
               "x-nullable": true
            },
            "labels_add": {
               "description": "An array of labels to be added.",
               "items": {
                  "$ref": "#/definitions/CreateLabelParams"
               },
               "type": "array"
            },
            "labels_remove": {
               "description": "An array of labels to be removed.",
               "items": {
                  "$ref": "#/definitions/CreateLabelParams"
               },
               "type": "array"
            },
            "move_to": {
               "enum": [
                  "first",
                  "last"
               ],
               "type": "string",
               "x-doc-skip": true
            },
            "owner_ids_add": {
               "description": "The UUIDs of the new owners to be added.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array",
               "uniqueItems": true
            },
            "owner_ids_remove": {
               "description": "The UUIDs of the owners to be removed.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array",
               "uniqueItems": true
            },
            "project_id": {
               "description": "The ID of the Project the Stories should belong to.",
               "format": "int64",
               "type": "integer"
            },
            "requested_by_id": {
               "description": "The ID of the member that requested the story.",
               "format": "uuid",
               "type": "string"
            },
            "story_ids": {
               "description": "The unique IDs of the Stories you wish to update.",
               "items": {
                  "format": "int64",
                  "type": "integer"
               },
               "type": "array"
            },
            "story_type": {
               "description": "The type of story (feature, bug, chore).",
               "enum": [
                  "bug",
                  "chore",
                  "feature"
               ],
               "type": "string"
            },
            "workflow_state_id": {
               "description": "The ID of the workflow state the story is currently in.",
               "format": "int64",
               "type": "integer"
            }
         },
         "required": [
            "story_ids"
         ],
         "type": "object",
         "x-doc-skip": true
      },
      "UpdateStory": {
         "additionalProperties": false,
         "properties": {
            "after_id": {
               "description": "The ID of the story we want to move this story after.",
               "format": "int64",
               "type": "integer"
            },
            "archived": {
               "description": "True if the story is archived, otherwise false.",
               "type": "boolean"
            },
            "before_id": {
               "description": "The ID of the story we want to move this story before.",
               "format": "int64",
               "type": "integer"
            },
            "branch_ids": {
               "description": "An array of IDs of Branches attached to the story.",
               "items": {
                  "format": "int64",
                  "type": "integer"
               },
               "type": "array",
               "uniqueItems": true
            },
            "commit_ids": {
               "description": "An array of IDs of Commits attached to the story.",
               "items": {
                  "format": "int64",
                  "type": "integer"
               },
               "type": "array",
               "uniqueItems": true
            },
            "completed_at_override": {
               "description": "A manual override for the time/date the Story was completed.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "deadline": {
               "description": "The due date of the story.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "description": {
               "description": "The description of the story.",
               "type": "string"
            },
            "epic_id": {
               "description": "The ID of the epic the story belongs to.",
               "format": "int64",
               "type": "integer",
               "x-nullable": true
            },
            "estimate": {
               "description": "The numeric point estimate of the story. Can also be null, which means unestimated.",
               "format": "int64",
               "type": "integer",
               "x-nullable": true
            },
            "file_ids": {
               "description": "An array of IDs of files attached to the story.",
               "items": {
                  "format": "int64",
                  "type": "integer"
               },
               "type": "array",
               "uniqueItems": true
            },
            "follower_ids": {
               "description": "An array of UUIDs of the followers of this story.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array",
               "uniqueItems": true
            },
            "iteration_id": {
               "description": "The ID of the iteration the story belongs to.",
               "format": "int64",
               "type": "integer",
               "x-nullable": true
            },
            "labels": {
               "description": "An array of labels attached to the story.",
               "items": {
                  "$ref": "#/definitions/CreateLabelParams"
               },
               "type": "array"
            },
            "linked_file_ids": {
               "description": "An array of IDs of linked files attached to the story.",
               "items": {
                  "format": "int64",
                  "type": "integer"
               },
               "type": "array",
               "uniqueItems": true
            },
            "move_to": {
               "enum": [
                  "first",
                  "last"
               ],
               "type": "string",
               "x-doc-skip": true
            },
            "name": {
               "description": "The title of the story.",
               "type": "string"
            },
            "owner_ids": {
               "description": "An array of UUIDs of the owners of this story.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array",
               "uniqueItems": true
            },
            "project_id": {
               "description": "The ID of the project the story belongs to.",
               "format": "int64",
               "type": "integer"
            },
            "pull_request_ids": {
               "description": "An array of IDs of Pull/Merge Requests attached to the story.",
               "items": {
                  "format": "int64",
                  "type": "integer"
               },
               "type": "array",
               "uniqueItems": true
            },
            "requested_by_id": {
               "description": "The ID of the member that requested the story.",
               "format": "uuid",
               "type": "string"
            },
            "started_at_override": {
               "description": "A manual override for the time/date the Story was started.",
               "format": "date-time",
               "type": "string",
               "x-nullable": true
            },
            "story_type": {
               "description": "The type of story (feature, bug, chore).",
               "enum": [
                  "bug",
                  "chore",
                  "feature"
               ],
               "type": "string"
            },
            "workflow_state_id": {
               "description": "The ID of the workflow state the story is currently in.",
               "format": "int64",
               "type": "integer"
            }
         },
         "type": "object",
         "x-doc-skip": true
      },
      "UpdateStoryLink": {
         "additionalProperties": false,
         "properties": {
            "verb": {
               "description": "The type of link.",
               "enum": [
                  "blocks",
                  "duplicates",
                  "relates to"
               ],
               "type": "string"
            }
         },
         "required": [
            "verb"
         ],
         "type": "object",
         "x-doc-skip": true
      },
      "UpdateTask": {
         "additionalProperties": false,
         "properties": {
            "after_id": {
               "description": "Move task after this task ID.",
               "format": "int64",
               "type": "integer"
            },
            "before_id": {
               "description": "Move task before this task ID.",
               "format": "int64",
               "type": "integer"
            },
            "complete": {
               "description": "A true/false boolean indicating whether the task is complete.",
               "type": "boolean"
            },
            "description": {
               "description": "The Task's description.",
               "type": "string"
            },
            "owner_ids": {
               "description": "An array of UUIDs of the owners of this story.",
               "items": {
                  "format": "uuid",
                  "type": "string"
               },
               "type": "array"
            }
         },
         "type": "object",
         "x-doc-skip": true
      },
      "Workflow": {
         "additionalProperties": false,
         "description": "Details of the workflow associated with the Team.",
         "properties": {
            "auto_assign_owner": {
               "description": "Indicates if an owner is automatically assigned when an unowned story is started.",
               "type": "boolean"
            },
            "created_at": {
               "description": "The date the Workflow was created.",
               "format": "date-time",
               "type": "string"
            },
            "default_state_id": {
               "description": "The unique ID of the default state that new Stories are entered into.",
               "format": "int64",
               "type": "integer"
            },
            "description": {
               "description": "A description of the workflow.",
               "type": "string"
            },
            "entity_type": {
               "description": "A string description of this resource.",
               "type": "string"
            },
            "id": {
               "description": "The unique ID of the Workflow.",
               "format": "int64",
               "type": "integer"
            },
            "name": {
               "description": "The name of the workflow.",
               "type": "string"
            },
            "project_ids": {
               "description": "An array of IDs of projects within the Workflow.",
               "items": {
                  "format": "double",
                  "type": "number"
               },
               "type": "array"
            },
            "states": {
               "description": "A map of the states in this Workflow.",
               "items": {
                  "$ref": "#/definitions/WorkflowState"
               },
               "type": "array"
            },
            "team_id": {
               "description": "The ID of the team the workflow belongs to.",
               "format": "int64",
               "type": "integer"
            },
            "updated_at": {
               "description": "The date the Workflow was updated.",
               "format": "date-time",
               "type": "string"
            }
         },
         "required": [
            "auto_assign_owner",
            "created_at",
            "default_state_id",
            "description",
            "entity_type",
            "id",
            "name",
            "project_ids",
            "states",
            "team_id",
            "updated_at"
         ],
         "type": "object"
      },
      "WorkflowState": {
         "additionalProperties": false,
         "description": "Workflow State is any of the at least 3 columns. Workflow States correspond to one of 3 types: Unstarted, Started, or Done.",
         "properties": {
            "color": {
               "description": "The hex color for this Workflow State.",
               "type": "string"
            },
            "created_at": {
               "description": "The time/date the Workflow State was created.",
               "format": "date-time",
               "type": "string"
            },
            "description": {
               "description": "The description of what sort of Stories belong in that Workflow state.",
               "type": "string"
            },
            "entity_type": {
               "description": "A string description of this resource.",
               "type": "string"
            },
            "id": {
               "description": "The unique ID of the Workflow State.",
               "format": "int64",
               "type": "integer"
            },
            "name": {
               "description": "The Workflow State's name.",
               "type": "string"
            },
            "num_stories": {
               "description": "The number of Stories currently in that Workflow State.",
               "format": "int64",
               "type": "integer"
            },
            "num_story_templates": {
               "description": "The number of Story Templates associated with that Workflow State.",
               "format": "int64",
               "type": "integer"
            },
            "position": {
               "description": "The position that the Workflow State is in, starting with 0 at the left.",
               "format": "int64",
               "type": "integer"
            },
            "type": {
               "description": "The type of Workflow State (Unstarted, Started, or Finished)",
               "type": "string"
            },
            "updated_at": {
               "description": "When the Workflow State was last updated.",
               "format": "date-time",
               "type": "string"
            },
            "verb": {
               "description": "The verb that triggers a move to that Workflow State when making GitHub commits.",
               "type": "string",
               "x-nullable": true
            }
         },
         "required": [
            "color",
            "created_at",
            "description",
            "entity_type",
            "id",
            "name",
            "num_stories",
            "num_story_templates",
            "position",
            "type",
            "updated_at",
            "verb"
         ],
         "type": "object"
      }
   },
   "info": {
      "description": "Clubhouse API",
      "title": "Clubhouse API",
      "version": "Beta"
   },
   "paths": {
      "/api/beta/categories": {
         "get": {
            "description": "List Categories returns a list of all Categories and their attributes.",
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/Category"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Categories"
         },
         "post": {
            "description": "Create Category allows you to create a new Category in Clubhouse.",
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateCategory",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateCategory"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Category"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Category"
         }
      },
      "/api/beta/categories/{category-public-id}": {
         "delete": {
            "description": "Delete Category can be used to delete any Category.",
            "parameters": [
               {
                  "description": "The unique ID of the Category.",
                  "format": "int64",
                  "in": "path",
                  "name": "category-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete Category"
         },
         "get": {
            "description": "Get Category returns information about the selected Category.",
            "parameters": [
               {
                  "description": "The unique ID of the Category.",
                  "format": "int64",
                  "in": "path",
                  "name": "category-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Category"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Category"
         },
         "put": {
            "description": "Update Category allows you to replace a Category name with another name. If you try to name a Category something that already exists, you will receive a 422 response.",
            "parameters": [
               {
                  "description": "The unique ID of the Category you wish to update.",
                  "format": "int64",
                  "in": "path",
                  "name": "category-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "UpdateCategory",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateCategory"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Category"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update Category"
         }
      },
      "/api/beta/categories/{category-public-id}/milestones": {
         "get": {
            "description": "List Category Milestones returns a list of all Milestones with the Category.",
            "parameters": [
               {
                  "description": "The unique ID of the Category.",
                  "format": "int64",
                  "in": "path",
                  "name": "category-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/Milestone"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Category Milestones"
         }
      },
      "/api/beta/entity-templates": {
         "get": {
            "description": "List all the entity templates for an organization.",
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/EntityTemplate"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Entity Templates."
         },
         "post": {
            "description": "Create a new entity template for your organization.",
            "parameters": [
               {
                  "description": "Request paramaters for creating an entirely new entity template.",
                  "in": "body",
                  "name": "CreateEntityTemplate",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateEntityTemplate"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/EntityTemplate"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Entity Template"
         }
      },
      "/api/beta/entity-templates/disable": {
         "put": {
            "description": "Disables the Story Template feature for the given Organization.",
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Disable Story Templates"
         }
      },
      "/api/beta/entity-templates/enable": {
         "put": {
            "description": "Enables the Story Template feature for the given Organization.",
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Enable Story Templates"
         }
      },
      "/api/beta/entity-templates/{entity-template-public-id}": {
         "delete": {
            "description": null,
            "parameters": [
               {
                  "description": "The unique ID of the entity template.",
                  "format": "uuid",
                  "in": "path",
                  "name": "entity-template-public-id",
                  "required": true,
                  "type": "string"
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete Entity Template"
         },
         "get": {
            "description": "Get Entity Template returns information about a given entity template.",
            "parameters": [
               {
                  "description": "The unique ID of the entity template.",
                  "format": "uuid",
                  "in": "path",
                  "name": "entity-template-public-id",
                  "required": true,
                  "type": "string"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/EntityTemplate"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Entity Template"
         },
         "put": {
            "description": "Update an entity template's name or its contents.",
            "parameters": [
               {
                  "description": "The unique ID of the template to be updated.",
                  "format": "uuid",
                  "in": "path",
                  "name": "entity-template-public-id",
                  "required": true,
                  "type": "string"
               },
               {
                  "description": "Request parameters for changing either a template's name or any of\n  the attributes it is designed to pre-populate.",
                  "in": "body",
                  "name": "UpdateEntityTemplate",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateEntityTemplate"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/EntityTemplate"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update Entity Template"
         }
      },
      "/api/beta/epic-workflow": {
         "get": {
            "description": "Get Epic Workflow returns the Epic Workflow for the organization.",
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/EpicWorkflow"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Epic Workflow"
         }
      },
      "/api/beta/epics": {
         "get": {
            "description": "List Epics returns a list of all Epics and their attributes.",
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/EpicSlim"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Epics"
         },
         "post": {
            "description": "Create Epic allows you to create a new Epic in Clubhouse.",
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateEpic",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateEpic"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Epic"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Epic"
         }
      },
      "/api/beta/epics/{epic-public-id}": {
         "delete": {
            "description": "Delete Epic can be used to delete the Epic. The only required parameter is Epic ID.",
            "parameters": [
               {
                  "description": "The unique ID of the Epic.",
                  "format": "int64",
                  "in": "path",
                  "name": "epic-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete Epic"
         },
         "get": {
            "description": "Get Epic returns information about the selected Epic.",
            "parameters": [
               {
                  "description": "The unique ID of the Epic.",
                  "format": "int64",
                  "in": "path",
                  "name": "epic-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Epic"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Epic"
         },
         "put": {
            "description": "Update Epic can be used to update numerous fields in the Epic. The only required parameter is Epic ID, which can be found in the Clubhouse UI.",
            "parameters": [
               {
                  "description": "The unique ID of the Epic.",
                  "format": "int64",
                  "in": "path",
                  "name": "epic-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "UpdateEpic",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateEpic"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Epic"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update Epic"
         }
      },
      "/api/beta/epics/{epic-public-id}/comments": {
         "get": {
            "description": "Get a list of all Comments on an Epic.",
            "parameters": [
               {
                  "description": "The unique ID of the Epic.",
                  "format": "int64",
                  "in": "path",
                  "name": "epic-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/ThreadedComment"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Epic Comments"
         },
         "post": {
            "description": "This endpoint allows you to create a threaded Comment on an Epic.",
            "parameters": [
               {
                  "description": "The ID of the associated Epic.",
                  "format": "int64",
                  "in": "path",
                  "name": "epic-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateEpicComment",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateEpicComment"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/ThreadedComment"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Epic Comment"
         }
      },
      "/api/beta/epics/{epic-public-id}/comments/{comment-public-id}": {
         "delete": {
            "description": "This endpoint allows you to delete a Comment from an Epic.",
            "parameters": [
               {
                  "description": "The ID of the associated Epic.",
                  "format": "int64",
                  "in": "path",
                  "name": "epic-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "The ID of the Comment.",
                  "format": "int64",
                  "in": "path",
                  "name": "comment-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete Epic Comment"
         },
         "get": {
            "description": "This endpoint returns information about the selected Epic Comment.",
            "parameters": [
               {
                  "description": "The ID of the associated Epic.",
                  "format": "int64",
                  "in": "path",
                  "name": "epic-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "The ID of the Comment.",
                  "format": "int64",
                  "in": "path",
                  "name": "comment-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/ThreadedComment"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Epic Comment"
         },
         "post": {
            "description": "This endpoint allows you to create a nested Comment reply to an existing Epic Comment.",
            "parameters": [
               {
                  "description": "The ID of the associated Epic.",
                  "format": "int64",
                  "in": "path",
                  "name": "epic-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "The ID of the parent Epic Comment.",
                  "format": "int64",
                  "in": "path",
                  "name": "comment-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateCommentComment",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateCommentComment"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/ThreadedComment"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Epic Comment Comment"
         },
         "put": {
            "description": "This endpoint allows you to update a threaded Comment on an Epic.",
            "parameters": [
               {
                  "description": "The ID of the associated Epic.",
                  "format": "int64",
                  "in": "path",
                  "name": "epic-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "The ID of the Comment.",
                  "format": "int64",
                  "in": "path",
                  "name": "comment-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "UpdateComment",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateComment"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/ThreadedComment"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update Epic Comment"
         }
      },
      "/api/beta/files": {
         "get": {
            "description": "List Files returns a list of all Files and related attributes in your Clubhouse.",
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/File"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Files"
         },
         "post": {
            "description": null,
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateFiles",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateFiles"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/File"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Files"
         }
      },
      "/api/beta/files/{file-public-id}": {
         "delete": {
            "description": "Delete File can be used to delete any previously attached File.",
            "parameters": [
               {
                  "description": "The File’s unique ID.",
                  "format": "int64",
                  "in": "path",
                  "name": "file-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete File"
         },
         "get": {
            "description": "Get File returns information about the selected File.",
            "parameters": [
               {
                  "description": "The File’s unique ID.",
                  "format": "int64",
                  "in": "path",
                  "name": "file-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/File"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get File"
         },
         "put": {
            "description": "Update File can used to update the properties of a file uploaded to Clubhouse.",
            "parameters": [
               {
                  "description": "The unique ID assigned to the file in Clubhouse.",
                  "format": "int64",
                  "in": "path",
                  "name": "file-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "UpdateFile",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateFile"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/File"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update File"
         }
      },
      "/api/beta/groups": {
         "get": {
            "description": null,
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/Group"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Groups"
         },
         "post": {
            "description": null,
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateGroup",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateGroup"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Group"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Group"
         }
      },
      "/api/beta/groups/{group-public-id}": {
         "get": {
            "description": null,
            "parameters": [
               {
                  "description": "The unique ID of the Group.",
                  "format": "uuid",
                  "in": "path",
                  "name": "group-public-id",
                  "required": true,
                  "type": "string"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Group"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Group"
         },
         "put": {
            "description": null,
            "parameters": [
               {
                  "description": "The unique ID of the Group.",
                  "format": "uuid",
                  "in": "path",
                  "name": "group-public-id",
                  "required": true,
                  "type": "string"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "UpdateGroup",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateGroup"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Group"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update Group"
         }
      },
      "/api/beta/iterations": {
         "get": {
            "description": null,
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/IterationSlim"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Iterations"
         },
         "post": {
            "description": null,
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateIteration",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateIteration"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Iteration"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Iteration"
         }
      },
      "/api/beta/iterations/disable": {
         "put": {
            "description": "Disables Iterations for the current workspace",
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Disable Iterations"
         }
      },
      "/api/beta/iterations/enable": {
         "put": {
            "description": "Enables Iterations for the current workspace",
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Enable Iterations"
         }
      },
      "/api/beta/iterations/{iteration-public-id}": {
         "delete": {
            "description": null,
            "parameters": [
               {
                  "description": "The unique ID of the Iteration.",
                  "format": "int64",
                  "in": "path",
                  "name": "iteration-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete Iteration"
         },
         "get": {
            "description": null,
            "parameters": [
               {
                  "description": "The unique ID of the Iteration.",
                  "format": "int64",
                  "in": "path",
                  "name": "iteration-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Iteration"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Iteration"
         },
         "put": {
            "description": null,
            "parameters": [
               {
                  "description": "The unique ID of the Iteration.",
                  "format": "int64",
                  "in": "path",
                  "name": "iteration-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "UpdateIteration",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateIteration"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Iteration"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update Iteration"
         }
      },
      "/api/beta/labels": {
         "get": {
            "description": "List Labels returns a list of all Labels and their attributes.",
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "ListLabels",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/ListLabels"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/Label"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Labels"
         },
         "post": {
            "description": "Create Label allows you to create a new Label in Clubhouse.",
            "parameters": [
               {
                  "description": "Request parameters for creating a Label on a Clubhouse story.",
                  "in": "body",
                  "name": "CreateLabelParams",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateLabelParams"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Label"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Label"
         }
      },
      "/api/beta/labels/{label-public-id}": {
         "delete": {
            "description": "Delete Label can be used to delete any Label.",
            "parameters": [
               {
                  "description": "The unique ID of the Label.",
                  "format": "int64",
                  "in": "path",
                  "name": "label-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete Label"
         },
         "get": {
            "description": "Get Label returns information about the selected Label.",
            "parameters": [
               {
                  "description": "The unique ID of the Label.",
                  "format": "int64",
                  "in": "path",
                  "name": "label-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Label"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Label"
         },
         "put": {
            "description": "Update Label allows you to replace a Label name with another name. If you try to name a Label something that already exists, you will receive a 422 response.",
            "parameters": [
               {
                  "description": "The unique ID of the Label you wish to update.",
                  "format": "int64",
                  "in": "path",
                  "name": "label-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "UpdateLabel",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateLabel"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Label"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update Label"
         }
      },
      "/api/beta/labels/{label-public-id}/epics": {
         "get": {
            "description": "List all of the Epics with the Label.",
            "parameters": [
               {
                  "description": "The unique ID of the Label.",
                  "format": "int64",
                  "in": "path",
                  "name": "label-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/EpicSlim"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Label Epics"
         }
      },
      "/api/beta/linked-files": {
         "get": {
            "description": "List Linked Files returns a list of all Linked-Files and their attributes.",
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/LinkedFile"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Linked Files"
         },
         "post": {
            "description": "Create Linked File allows you to create a new Linked File in Clubhouse.",
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateLinkedFile",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateLinkedFile"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/LinkedFile"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Linked File"
         }
      },
      "/api/beta/linked-files/{linked-file-public-id}": {
         "delete": {
            "description": "Delete Linked File can be used to delete any previously attached Linked-File.",
            "parameters": [
               {
                  "description": "The unique identifier of the linked file.",
                  "format": "int64",
                  "in": "path",
                  "name": "linked-file-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete Linked File"
         },
         "get": {
            "description": "Get File returns information about the selected Linked File.",
            "parameters": [
               {
                  "description": "The unique identifier of the linked file.",
                  "format": "int64",
                  "in": "path",
                  "name": "linked-file-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/LinkedFile"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Linked File"
         },
         "put": {
            "description": "Updated Linked File allows you to update properties of a previously attached Linked-File.",
            "parameters": [
               {
                  "description": "The unique identifier of the linked file.",
                  "format": "int64",
                  "in": "path",
                  "name": "linked-file-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "UpdateLinkedFile",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateLinkedFile"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/LinkedFile"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update Linked File"
         }
      },
      "/api/beta/members": {
         "get": {
            "description": "List Members returns information about members of the organization.",
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "ListMembers",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/ListMembers"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/Member"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Members"
         }
      },
      "/api/beta/members/{member-public-id}": {
         "get": {
            "description": "Returns information about a Member.",
            "parameters": [
               {
                  "description": "The Member's unique ID.",
                  "format": "uuid",
                  "in": "path",
                  "name": "member-public-id",
                  "required": true,
                  "type": "string"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "GetMember",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/GetMember"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Member"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Member"
         }
      },
      "/api/beta/milestones": {
         "get": {
            "description": "List Milestones returns a list of all Milestones and their attributes.",
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/Milestone"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Milestones"
         },
         "post": {
            "description": "Create Milestone allows you to create a new Milestone in Clubhouse.",
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateMilestone",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateMilestone"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Milestone"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Milestone"
         }
      },
      "/api/beta/milestones/{milestone-public-id}": {
         "delete": {
            "description": "Delete Milestone can be used to delete any Milestone.",
            "parameters": [
               {
                  "description": "The ID of the Milestone.",
                  "format": "int64",
                  "in": "path",
                  "name": "milestone-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete Milestone"
         },
         "get": {
            "description": "Get Milestone returns information about a chosen Milestone.",
            "parameters": [
               {
                  "description": "The ID of the Milestone.",
                  "format": "int64",
                  "in": "path",
                  "name": "milestone-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Milestone"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Milestone"
         },
         "put": {
            "description": "Update Milestone can be used to update Milestone properties.",
            "parameters": [
               {
                  "description": "The ID of the Milestone.",
                  "format": "int64",
                  "in": "path",
                  "name": "milestone-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "UpdateMilestone",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateMilestone"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Milestone"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update Milestone"
         }
      },
      "/api/beta/milestones/{milestone-public-id}/epics": {
         "get": {
            "description": "List all of the Epics within the Milestone.",
            "parameters": [
               {
                  "description": "The ID of the Milestone.",
                  "format": "int64",
                  "in": "path",
                  "name": "milestone-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/EpicSlim"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Milestone Epics"
         }
      },
      "/api/beta/projects": {
         "get": {
            "description": "List Projects returns a list of all Projects and their attributes.",
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/Project"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Projects"
         },
         "post": {
            "description": "Create Project is used to create a new Clubhouse Project.",
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateProject",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateProject"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Project"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Project"
         }
      },
      "/api/beta/projects/{project-public-id}": {
         "delete": {
            "description": "Delete Project can be used to delete a Project. Projects can only be deleted if all associated Stories are moved or deleted. In the case that the Project cannot be deleted, you will receive a 422 response.",
            "parameters": [
               {
                  "description": "The unique ID of the Project.",
                  "format": "int64",
                  "in": "path",
                  "name": "project-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete Project"
         },
         "get": {
            "description": "Get Project returns information about the selected Project.",
            "parameters": [
               {
                  "description": "The unique ID of the Project.",
                  "format": "int64",
                  "in": "path",
                  "name": "project-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Project"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Project"
         },
         "put": {
            "description": "Update Project can be used to change properties of a Project.",
            "parameters": [
               {
                  "description": "The unique ID of the Project.",
                  "format": "int64",
                  "in": "path",
                  "name": "project-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "UpdateProject",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateProject"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Project"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update Project"
         }
      },
      "/api/beta/projects/{project-public-id}/stories": {
         "get": {
            "description": "List Stories returns a list of all Stories in a selected Project and their attributes.",
            "parameters": [
               {
                  "description": "The unique ID of the Project.",
                  "format": "int64",
                  "in": "path",
                  "name": "project-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/StorySlim"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Stories"
         }
      },
      "/api/beta/repositories": {
         "get": {
            "description": "List Repositories returns a list of all Repositories and their attributes.",
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/Repository"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Repositories"
         }
      },
      "/api/beta/repositories/{repo-public-id}": {
         "get": {
            "description": "Get Repository returns information about the selected Repository.",
            "parameters": [
               {
                  "description": "The unique ID of the Repository.",
                  "format": "int64",
                  "in": "path",
                  "name": "repo-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Repository"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Repository"
         }
      },
      "/api/beta/search": {
         "get": {
            "description": "Search lets you search Epics and Stories based on desired parameters. Since ordering of the results can change over time (due to search ranking decay, new Epics and Stories being created), the `next` value from the previous response can be used as the path and query string for the next page to ensure stable ordering.",
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "Search",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/Search"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/SearchResults"
                  }
               },
               "400": {
                  "description": "**Either:** (1) Schema mismatch **or** (2) Maximum of 1000 search results exceeded ",
                  "schema": {
                     "$ref": "#/definitions/MaxSearchResultsExceededError"
                  }
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Search"
         }
      },
      "/api/beta/search/epics": {
         "get": {
            "description": "Search Epics lets you search Epics based on desired parameters. Since ordering of stories can change over time (due to search ranking decay, new Epics being created), the `next` value from the previous response can be used as the path and query string for the next page to ensure stable ordering.",
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "Search",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/Search"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/EpicSearchResults"
                  }
               },
               "400": {
                  "description": "**Either:** (1) Schema mismatch **or** (2) Maximum of 1000 search results exceeded ",
                  "schema": {
                     "$ref": "#/definitions/MaxSearchResultsExceededError"
                  }
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Search Epics"
         }
      },
      "/api/beta/search/stories": {
         "get": {
            "description": "Search Stories lets you search Stories based on desired parameters. Since ordering of stories can change over time (due to search ranking decay, new stories being created), the `next` value from the previous response can be used as the path and query string for the next page to ensure stable ordering.",
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "Search",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/Search"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/StorySearchResults"
                  }
               },
               "400": {
                  "description": "**Either:** (1) Schema mismatch **or** (2) Maximum of 1000 search results exceeded ",
                  "schema": {
                     "$ref": "#/definitions/MaxSearchResultsExceededError"
                  }
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Search Stories"
         }
      },
      "/api/beta/stories": {
         "post": {
            "description": "Create Story is used to add a new story to your Clubhouse.",
            "parameters": [
               {
                  "description": "Used to create multiple stories in a single request.",
                  "in": "body",
                  "name": "CreateStoryParams",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateStoryParams"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Story"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Story"
         }
      },
      "/api/beta/stories/bulk": {
         "delete": {
            "description": "Delete Multiple Stories allows you to delete multiple archived stories at once.",
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "DeleteStories",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/DeleteStories"
                  }
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete Multiple Stories"
         },
         "post": {
            "description": "Create Multiple Stories allows you to create multiple stories in a single request using the same syntax as [Create Story](https://clubhouse.io/api/#create-story).",
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateStories",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateStories"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/StorySlim"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Multiple Stories"
         },
         "put": {
            "description": "Update Multiple Stories allows you to make changes to numerous stories at once.",
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "UpdateStories",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateStories"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/StorySlim"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update Multiple Stories"
         }
      },
      "/api/beta/stories/search": {
         "post": {
            "description": "Search Stories lets you search Stories based on desired parameters.",
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "SearchStories",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/SearchStories"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/StorySlim"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Search Stories (Old)"
         }
      },
      "/api/beta/stories/{story-public-id}": {
         "delete": {
            "description": "Delete Story can be used to delete any Story.",
            "parameters": [
               {
                  "description": "The ID of the Story.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete Story"
         },
         "get": {
            "description": "Get Story returns information about a chosen Story.",
            "parameters": [
               {
                  "description": "The ID of the Story.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Story"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Story"
         },
         "put": {
            "description": "Update Story can be used to update Story properties.",
            "parameters": [
               {
                  "description": "The unique identifier of this story.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "UpdateStory",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateStory"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Story"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update Story"
         }
      },
      "/api/beta/stories/{story-public-id}/comments": {
         "post": {
            "description": "Create Comment allows you to create a Comment on any Story.",
            "parameters": [
               {
                  "description": "The ID of the Story that the Comment is in.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateComment",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateComment"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Comment"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Comment"
         }
      },
      "/api/beta/stories/{story-public-id}/comments/{comment-public-id}": {
         "delete": {
            "description": "Delete a Comment from any story.",
            "parameters": [
               {
                  "description": "The ID of the Story that the Comment is in.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "The ID of the Comment.",
                  "format": "int64",
                  "in": "path",
                  "name": "comment-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete Comment"
         },
         "get": {
            "description": "Get Comment is used to get Comment information.",
            "parameters": [
               {
                  "description": "The ID of the Story that the Comment is in.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "The ID of the Comment.",
                  "format": "int64",
                  "in": "path",
                  "name": "comment-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Comment"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Comment"
         },
         "put": {
            "description": "Update Comment replaces the text of the existing Comment.",
            "parameters": [
               {
                  "description": "The ID of the Story that the Comment is in.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "The ID of the Comment",
                  "format": "int64",
                  "in": "path",
                  "name": "comment-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "UpdateComment",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateComment"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Comment"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update Comment"
         }
      },
      "/api/beta/stories/{story-public-id}/comments/{comment-public-id}/reactions": {
         "delete": {
            "description": "Delete a Reaction from any comment.",
            "parameters": [
               {
                  "description": "The ID of the Story that the Comment is in.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "The ID of the Comment.",
                  "format": "int64",
                  "in": "path",
                  "name": "comment-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateOrDeleteReaction",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateOrDeleteReaction"
                  }
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete Reaction"
         },
         "post": {
            "description": "Create a reaction to a comment.",
            "parameters": [
               {
                  "description": "The ID of the Story that the Comment is in.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "The ID of the Comment.",
                  "format": "int64",
                  "in": "path",
                  "name": "comment-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateOrDeleteReaction",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateOrDeleteReaction"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/Reaction"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Reaction"
         }
      },
      "/api/beta/stories/{story-public-id}/tasks": {
         "post": {
            "description": "Create Task is used to create a new task in a Story.",
            "parameters": [
               {
                  "description": "The ID of the Story that the Task will be in.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateTask",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateTask"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Task"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Task"
         }
      },
      "/api/beta/stories/{story-public-id}/tasks/{task-public-id}": {
         "delete": {
            "description": "Delete Task can be used to delete any previously created Task on a Story.",
            "parameters": [
               {
                  "description": "The unique ID of the Story this Task is associated with.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "The unique ID of the Task.",
                  "format": "int64",
                  "in": "path",
                  "name": "task-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete Task"
         },
         "get": {
            "description": "Returns information about a chosen Task.",
            "parameters": [
               {
                  "description": "The unique ID of the Story this Task is associated with.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "The unique ID of the Task.",
                  "format": "int64",
                  "in": "path",
                  "name": "task-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Task"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Task"
         },
         "put": {
            "description": "Update Task can be used to update Task properties.",
            "parameters": [
               {
                  "description": "The unique identifier of the parent Story.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "The unique identifier of the Task you wish to update.",
                  "format": "int64",
                  "in": "path",
                  "name": "task-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "UpdateTask",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateTask"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Task"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update Task"
         }
      },
      "/api/beta/story-links": {
         "post": {
            "description": "Story Links (called Story Relationships in the UI) allow you create semantic relationships between two stories. The parameters read like an active voice grammatical sentence:  subject -> verb -> object.\n\nThe subject story acts on the object Story; the object story is the direct object of the sentence.\n\nThe subject story \"blocks\", \"duplicates\", or \"relates to\" the object story.  Examples:\n- \"story 5 blocks story 6” -- story 6 is now \"blocked\" until story 5 is moved to a Done workflow state.\n- \"story 2 duplicates story 1” -- Story 2 represents the same body of work as Story 1 (and should probably be archived).\n- \"story 7 relates to story 3”",
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateStoryLink",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateStoryLink"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/StoryLink"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Story Link"
         }
      },
      "/api/beta/story-links/{story-link-public-id}": {
         "delete": {
            "description": "Delete Story Link can be used to delete any Story Link.",
            "parameters": [
               {
                  "description": "The unique ID of the Story Link.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-link-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete Story Link"
         },
         "get": {
            "description": "Returns information about the selected Story Link.",
            "parameters": [
               {
                  "description": "The unique ID of the Story Link.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-link-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/StoryLink"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Story Link"
         },
         "put": {
            "description": "Update the relationship for the Story Link.",
            "parameters": [
               {
                  "description": "The unique ID of the Story Link.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-link-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "UpdateStoryLink",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateStoryLink"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/StoryLink"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update Story Link"
         }
      },
      "/api/beta/teams": {
         "get": {
            "description": "List Teams returns a list of all Teams in the organization.",
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/Team"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Teams"
         }
      },
      "/api/beta/teams/{team-public-id}": {
         "get": {
            "description": "Get Team is used to get Team information.",
            "parameters": [
               {
                  "description": "The ID of the team.",
                  "format": "int64",
                  "in": "path",
                  "name": "team-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Team"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Team"
         }
      },
      "/api/beta/workflows": {
         "get": {
            "description": "List Workflows returns a list of all Workflows in the organization.",
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/Workflow"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Workflows"
         }
      },
      "/api/private/categories": {
         "get": {
            "description": "List Categories returns a list of all Categories and their attributes.",
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/Category"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Categories"
         },
         "post": {
            "description": "Create Category allows you to create a new Category in Clubhouse.",
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateCategory",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateCategory"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Category"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Category"
         }
      },
      "/api/private/categories/{category-public-id}": {
         "delete": {
            "description": "Delete Category can be used to delete any Category.",
            "parameters": [
               {
                  "description": "The unique ID of the Category.",
                  "format": "int64",
                  "in": "path",
                  "name": "category-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete Category"
         },
         "get": {
            "description": "Get Category returns information about the selected Category.",
            "parameters": [
               {
                  "description": "The unique ID of the Category.",
                  "format": "int64",
                  "in": "path",
                  "name": "category-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Category"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Category"
         },
         "put": {
            "description": "Update Category allows you to replace a Category name with another name. If you try to name a Category something that already exists, you will receive a 422 response.",
            "parameters": [
               {
                  "description": "The unique ID of the Category you wish to update.",
                  "format": "int64",
                  "in": "path",
                  "name": "category-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "UpdateCategory",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateCategory"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Category"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update Category"
         }
      },
      "/api/private/categories/{category-public-id}/milestones": {
         "get": {
            "description": "List Category Milestones returns a list of all Milestones with the Category.",
            "parameters": [
               {
                  "description": "The unique ID of the Category.",
                  "format": "int64",
                  "in": "path",
                  "name": "category-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/Milestone"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Category Milestones"
         }
      },
      "/api/private/entity-templates": {
         "get": {
            "description": "List all the entity templates for an organization.",
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/EntityTemplate"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Entity Templates."
         },
         "post": {
            "description": "Create a new entity template for your organization.",
            "parameters": [
               {
                  "description": "Request paramaters for creating an entirely new entity template.",
                  "in": "body",
                  "name": "CreateEntityTemplate",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateEntityTemplate"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/EntityTemplate"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Entity Template"
         }
      },
      "/api/private/entity-templates/disable": {
         "put": {
            "description": "Disables the Story Template feature for the given Organization.",
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Disable Story Templates"
         }
      },
      "/api/private/entity-templates/enable": {
         "put": {
            "description": "Enables the Story Template feature for the given Organization.",
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Enable Story Templates"
         }
      },
      "/api/private/entity-templates/{entity-template-public-id}": {
         "delete": {
            "description": null,
            "parameters": [
               {
                  "description": "The unique ID of the entity template.",
                  "format": "uuid",
                  "in": "path",
                  "name": "entity-template-public-id",
                  "required": true,
                  "type": "string"
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete Entity Template"
         },
         "get": {
            "description": "Get Entity Template returns information about a given entity template.",
            "parameters": [
               {
                  "description": "The unique ID of the entity template.",
                  "format": "uuid",
                  "in": "path",
                  "name": "entity-template-public-id",
                  "required": true,
                  "type": "string"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/EntityTemplate"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Entity Template"
         },
         "put": {
            "description": "Update an entity template's name or its contents.",
            "parameters": [
               {
                  "description": "The unique ID of the template to be updated.",
                  "format": "uuid",
                  "in": "path",
                  "name": "entity-template-public-id",
                  "required": true,
                  "type": "string"
               },
               {
                  "description": "Request parameters for changing either a template's name or any of\n  the attributes it is designed to pre-populate.",
                  "in": "body",
                  "name": "UpdateEntityTemplate",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateEntityTemplate"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/EntityTemplate"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update Entity Template"
         }
      },
      "/api/private/epic-workflow": {
         "get": {
            "description": "Get Epic Workflow returns the Epic Workflow for the organization.",
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/EpicWorkflow"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Epic Workflow"
         }
      },
      "/api/private/epics": {
         "get": {
            "description": "List Epics returns a list of all Epics and their attributes.",
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/EpicSlim"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Epics"
         },
         "post": {
            "description": "Create Epic allows you to create a new Epic in Clubhouse.",
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateEpic",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateEpic"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Epic"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Epic"
         }
      },
      "/api/private/epics/{epic-public-id}": {
         "delete": {
            "description": "Delete Epic can be used to delete the Epic. The only required parameter is Epic ID.",
            "parameters": [
               {
                  "description": "The unique ID of the Epic.",
                  "format": "int64",
                  "in": "path",
                  "name": "epic-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete Epic"
         },
         "get": {
            "description": "Get Epic returns information about the selected Epic.",
            "parameters": [
               {
                  "description": "The unique ID of the Epic.",
                  "format": "int64",
                  "in": "path",
                  "name": "epic-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Epic"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Epic"
         },
         "put": {
            "description": "Update Epic can be used to update numerous fields in the Epic. The only required parameter is Epic ID, which can be found in the Clubhouse UI.",
            "parameters": [
               {
                  "description": "The unique ID of the Epic.",
                  "format": "int64",
                  "in": "path",
                  "name": "epic-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "UpdateEpic",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateEpic"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Epic"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update Epic"
         }
      },
      "/api/private/epics/{epic-public-id}/comments": {
         "get": {
            "description": "Get a list of all Comments on an Epic.",
            "parameters": [
               {
                  "description": "The unique ID of the Epic.",
                  "format": "int64",
                  "in": "path",
                  "name": "epic-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/ThreadedComment"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Epic Comments"
         },
         "post": {
            "description": "This endpoint allows you to create a threaded Comment on an Epic.",
            "parameters": [
               {
                  "description": "The ID of the associated Epic.",
                  "format": "int64",
                  "in": "path",
                  "name": "epic-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateEpicComment",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateEpicComment"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/ThreadedComment"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Epic Comment"
         }
      },
      "/api/private/epics/{epic-public-id}/comments/{comment-public-id}": {
         "delete": {
            "description": "This endpoint allows you to delete a Comment from an Epic.",
            "parameters": [
               {
                  "description": "The ID of the associated Epic.",
                  "format": "int64",
                  "in": "path",
                  "name": "epic-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "The ID of the Comment.",
                  "format": "int64",
                  "in": "path",
                  "name": "comment-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete Epic Comment"
         },
         "get": {
            "description": "This endpoint returns information about the selected Epic Comment.",
            "parameters": [
               {
                  "description": "The ID of the associated Epic.",
                  "format": "int64",
                  "in": "path",
                  "name": "epic-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "The ID of the Comment.",
                  "format": "int64",
                  "in": "path",
                  "name": "comment-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/ThreadedComment"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Epic Comment"
         },
         "post": {
            "description": "This endpoint allows you to create a nested Comment reply to an existing Epic Comment.",
            "parameters": [
               {
                  "description": "The ID of the associated Epic.",
                  "format": "int64",
                  "in": "path",
                  "name": "epic-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "The ID of the parent Epic Comment.",
                  "format": "int64",
                  "in": "path",
                  "name": "comment-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateCommentComment",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateCommentComment"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/ThreadedComment"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Epic Comment Comment"
         },
         "put": {
            "description": "This endpoint allows you to update a threaded Comment on an Epic.",
            "parameters": [
               {
                  "description": "The ID of the associated Epic.",
                  "format": "int64",
                  "in": "path",
                  "name": "epic-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "The ID of the Comment.",
                  "format": "int64",
                  "in": "path",
                  "name": "comment-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "UpdateComment",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateComment"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/ThreadedComment"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update Epic Comment"
         }
      },
      "/api/private/files": {
         "get": {
            "description": "List Files returns a list of all Files and related attributes in your Clubhouse.",
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/File"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Files"
         },
         "post": {
            "description": null,
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateFiles",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateFiles"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/File"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Files"
         }
      },
      "/api/private/files/{file-public-id}": {
         "delete": {
            "description": "Delete File can be used to delete any previously attached File.",
            "parameters": [
               {
                  "description": "The File’s unique ID.",
                  "format": "int64",
                  "in": "path",
                  "name": "file-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete File"
         },
         "get": {
            "description": "Get File returns information about the selected File.",
            "parameters": [
               {
                  "description": "The File’s unique ID.",
                  "format": "int64",
                  "in": "path",
                  "name": "file-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/File"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get File"
         },
         "put": {
            "description": "Update File can used to update the properties of a file uploaded to Clubhouse.",
            "parameters": [
               {
                  "description": "The unique ID assigned to the file in Clubhouse.",
                  "format": "int64",
                  "in": "path",
                  "name": "file-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "UpdateFile",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateFile"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/File"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update File"
         }
      },
      "/api/private/groups": {
         "get": {
            "description": null,
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/Group"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Groups"
         },
         "post": {
            "description": null,
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateGroup",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateGroup"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Group"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Group"
         }
      },
      "/api/private/groups/{group-public-id}": {
         "get": {
            "description": null,
            "parameters": [
               {
                  "description": "The unique ID of the Group.",
                  "format": "uuid",
                  "in": "path",
                  "name": "group-public-id",
                  "required": true,
                  "type": "string"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Group"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Group"
         },
         "put": {
            "description": null,
            "parameters": [
               {
                  "description": "The unique ID of the Group.",
                  "format": "uuid",
                  "in": "path",
                  "name": "group-public-id",
                  "required": true,
                  "type": "string"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "UpdateGroup",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateGroup"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Group"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update Group"
         }
      },
      "/api/private/iterations": {
         "get": {
            "description": null,
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/IterationSlim"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Iterations"
         },
         "post": {
            "description": null,
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateIteration",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateIteration"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Iteration"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Iteration"
         }
      },
      "/api/private/iterations/disable": {
         "put": {
            "description": "Disables Iterations for the current workspace",
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Disable Iterations"
         }
      },
      "/api/private/iterations/enable": {
         "put": {
            "description": "Enables Iterations for the current workspace",
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Enable Iterations"
         }
      },
      "/api/private/iterations/{iteration-public-id}": {
         "delete": {
            "description": null,
            "parameters": [
               {
                  "description": "The unique ID of the Iteration.",
                  "format": "int64",
                  "in": "path",
                  "name": "iteration-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete Iteration"
         },
         "get": {
            "description": null,
            "parameters": [
               {
                  "description": "The unique ID of the Iteration.",
                  "format": "int64",
                  "in": "path",
                  "name": "iteration-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Iteration"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Iteration"
         },
         "put": {
            "description": null,
            "parameters": [
               {
                  "description": "The unique ID of the Iteration.",
                  "format": "int64",
                  "in": "path",
                  "name": "iteration-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "UpdateIteration",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateIteration"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Iteration"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update Iteration"
         }
      },
      "/api/private/labels": {
         "get": {
            "description": "List Labels returns a list of all Labels and their attributes.",
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "ListLabels",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/ListLabels"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/Label"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Labels"
         },
         "post": {
            "description": "Create Label allows you to create a new Label in Clubhouse.",
            "parameters": [
               {
                  "description": "Request parameters for creating a Label on a Clubhouse story.",
                  "in": "body",
                  "name": "CreateLabelParams",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateLabelParams"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Label"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Label"
         }
      },
      "/api/private/labels/{label-public-id}": {
         "delete": {
            "description": "Delete Label can be used to delete any Label.",
            "parameters": [
               {
                  "description": "The unique ID of the Label.",
                  "format": "int64",
                  "in": "path",
                  "name": "label-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete Label"
         },
         "get": {
            "description": "Get Label returns information about the selected Label.",
            "parameters": [
               {
                  "description": "The unique ID of the Label.",
                  "format": "int64",
                  "in": "path",
                  "name": "label-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Label"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Label"
         },
         "put": {
            "description": "Update Label allows you to replace a Label name with another name. If you try to name a Label something that already exists, you will receive a 422 response.",
            "parameters": [
               {
                  "description": "The unique ID of the Label you wish to update.",
                  "format": "int64",
                  "in": "path",
                  "name": "label-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "UpdateLabel",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateLabel"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Label"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update Label"
         }
      },
      "/api/private/labels/{label-public-id}/epics": {
         "get": {
            "description": "List all of the Epics with the Label.",
            "parameters": [
               {
                  "description": "The unique ID of the Label.",
                  "format": "int64",
                  "in": "path",
                  "name": "label-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/EpicSlim"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Label Epics"
         }
      },
      "/api/private/linked-files": {
         "get": {
            "description": "List Linked Files returns a list of all Linked-Files and their attributes.",
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/LinkedFile"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Linked Files"
         },
         "post": {
            "description": "Create Linked File allows you to create a new Linked File in Clubhouse.",
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateLinkedFile",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateLinkedFile"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/LinkedFile"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Linked File"
         }
      },
      "/api/private/linked-files/{linked-file-public-id}": {
         "delete": {
            "description": "Delete Linked File can be used to delete any previously attached Linked-File.",
            "parameters": [
               {
                  "description": "The unique identifier of the linked file.",
                  "format": "int64",
                  "in": "path",
                  "name": "linked-file-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete Linked File"
         },
         "get": {
            "description": "Get File returns information about the selected Linked File.",
            "parameters": [
               {
                  "description": "The unique identifier of the linked file.",
                  "format": "int64",
                  "in": "path",
                  "name": "linked-file-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/LinkedFile"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Linked File"
         },
         "put": {
            "description": "Updated Linked File allows you to update properties of a previously attached Linked-File.",
            "parameters": [
               {
                  "description": "The unique identifier of the linked file.",
                  "format": "int64",
                  "in": "path",
                  "name": "linked-file-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "UpdateLinkedFile",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateLinkedFile"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/LinkedFile"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update Linked File"
         }
      },
      "/api/private/members": {
         "get": {
            "description": "List Members returns information about members of the organization.",
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "ListMembers",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/ListMembers"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/Member"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Members"
         }
      },
      "/api/private/members/{member-public-id}": {
         "get": {
            "description": "Returns information about a Member.",
            "parameters": [
               {
                  "description": "The Member's unique ID.",
                  "format": "uuid",
                  "in": "path",
                  "name": "member-public-id",
                  "required": true,
                  "type": "string"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "GetMember",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/GetMember"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Member"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Member"
         }
      },
      "/api/private/milestones": {
         "get": {
            "description": "List Milestones returns a list of all Milestones and their attributes.",
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/Milestone"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Milestones"
         },
         "post": {
            "description": "Create Milestone allows you to create a new Milestone in Clubhouse.",
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateMilestone",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateMilestone"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Milestone"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Milestone"
         }
      },
      "/api/private/milestones/{milestone-public-id}": {
         "delete": {
            "description": "Delete Milestone can be used to delete any Milestone.",
            "parameters": [
               {
                  "description": "The ID of the Milestone.",
                  "format": "int64",
                  "in": "path",
                  "name": "milestone-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete Milestone"
         },
         "get": {
            "description": "Get Milestone returns information about a chosen Milestone.",
            "parameters": [
               {
                  "description": "The ID of the Milestone.",
                  "format": "int64",
                  "in": "path",
                  "name": "milestone-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Milestone"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Milestone"
         },
         "put": {
            "description": "Update Milestone can be used to update Milestone properties.",
            "parameters": [
               {
                  "description": "The ID of the Milestone.",
                  "format": "int64",
                  "in": "path",
                  "name": "milestone-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "UpdateMilestone",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateMilestone"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Milestone"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update Milestone"
         }
      },
      "/api/private/milestones/{milestone-public-id}/epics": {
         "get": {
            "description": "List all of the Epics within the Milestone.",
            "parameters": [
               {
                  "description": "The ID of the Milestone.",
                  "format": "int64",
                  "in": "path",
                  "name": "milestone-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/EpicSlim"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Milestone Epics"
         }
      },
      "/api/private/projects": {
         "get": {
            "description": "List Projects returns a list of all Projects and their attributes.",
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/Project"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Projects"
         },
         "post": {
            "description": "Create Project is used to create a new Clubhouse Project.",
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateProject",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateProject"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Project"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Project"
         }
      },
      "/api/private/projects/{project-public-id}": {
         "delete": {
            "description": "Delete Project can be used to delete a Project. Projects can only be deleted if all associated Stories are moved or deleted. In the case that the Project cannot be deleted, you will receive a 422 response.",
            "parameters": [
               {
                  "description": "The unique ID of the Project.",
                  "format": "int64",
                  "in": "path",
                  "name": "project-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete Project"
         },
         "get": {
            "description": "Get Project returns information about the selected Project.",
            "parameters": [
               {
                  "description": "The unique ID of the Project.",
                  "format": "int64",
                  "in": "path",
                  "name": "project-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Project"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Project"
         },
         "put": {
            "description": "Update Project can be used to change properties of a Project.",
            "parameters": [
               {
                  "description": "The unique ID of the Project.",
                  "format": "int64",
                  "in": "path",
                  "name": "project-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "UpdateProject",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateProject"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Project"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update Project"
         }
      },
      "/api/private/projects/{project-public-id}/stories": {
         "get": {
            "description": "List Stories returns a list of all Stories in a selected Project and their attributes.",
            "parameters": [
               {
                  "description": "The unique ID of the Project.",
                  "format": "int64",
                  "in": "path",
                  "name": "project-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/StorySlim"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Stories"
         }
      },
      "/api/private/repositories": {
         "get": {
            "description": "List Repositories returns a list of all Repositories and their attributes.",
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/Repository"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Repositories"
         }
      },
      "/api/private/repositories/{repo-public-id}": {
         "get": {
            "description": "Get Repository returns information about the selected Repository.",
            "parameters": [
               {
                  "description": "The unique ID of the Repository.",
                  "format": "int64",
                  "in": "path",
                  "name": "repo-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Repository"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Repository"
         }
      },
      "/api/private/search": {
         "get": {
            "description": "Search lets you search Epics and Stories based on desired parameters. Since ordering of the results can change over time (due to search ranking decay, new Epics and Stories being created), the `next` value from the previous response can be used as the path and query string for the next page to ensure stable ordering.",
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "Search",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/Search"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/SearchResults"
                  }
               },
               "400": {
                  "description": "**Either:** (1) Schema mismatch **or** (2) Maximum of 1000 search results exceeded ",
                  "schema": {
                     "$ref": "#/definitions/MaxSearchResultsExceededError"
                  }
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Search"
         }
      },
      "/api/private/search/epics": {
         "get": {
            "description": "Search Epics lets you search Epics based on desired parameters. Since ordering of stories can change over time (due to search ranking decay, new Epics being created), the `next` value from the previous response can be used as the path and query string for the next page to ensure stable ordering.",
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "Search",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/Search"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/EpicSearchResults"
                  }
               },
               "400": {
                  "description": "**Either:** (1) Schema mismatch **or** (2) Maximum of 1000 search results exceeded ",
                  "schema": {
                     "$ref": "#/definitions/MaxSearchResultsExceededError"
                  }
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Search Epics"
         }
      },
      "/api/private/search/stories": {
         "get": {
            "description": "Search Stories lets you search Stories based on desired parameters. Since ordering of stories can change over time (due to search ranking decay, new stories being created), the `next` value from the previous response can be used as the path and query string for the next page to ensure stable ordering.",
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "Search",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/Search"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/StorySearchResults"
                  }
               },
               "400": {
                  "description": "**Either:** (1) Schema mismatch **or** (2) Maximum of 1000 search results exceeded ",
                  "schema": {
                     "$ref": "#/definitions/MaxSearchResultsExceededError"
                  }
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Search Stories"
         }
      },
      "/api/private/stories": {
         "post": {
            "description": "Create Story is used to add a new story to your Clubhouse.",
            "parameters": [
               {
                  "description": "Used to create multiple stories in a single request.",
                  "in": "body",
                  "name": "CreateStoryParams",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateStoryParams"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Story"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Story"
         }
      },
      "/api/private/stories/bulk": {
         "delete": {
            "description": "Delete Multiple Stories allows you to delete multiple archived stories at once.",
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "DeleteStories",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/DeleteStories"
                  }
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete Multiple Stories"
         },
         "post": {
            "description": "Create Multiple Stories allows you to create multiple stories in a single request using the same syntax as [Create Story](https://clubhouse.io/api/#create-story).",
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateStories",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateStories"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/StorySlim"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Multiple Stories"
         },
         "put": {
            "description": "Update Multiple Stories allows you to make changes to numerous stories at once.",
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "UpdateStories",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateStories"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/StorySlim"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update Multiple Stories"
         }
      },
      "/api/private/stories/search": {
         "post": {
            "description": "Search Stories lets you search Stories based on desired parameters.",
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "SearchStories",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/SearchStories"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/StorySlim"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Search Stories (Old)"
         }
      },
      "/api/private/stories/{story-public-id}": {
         "delete": {
            "description": "Delete Story can be used to delete any Story.",
            "parameters": [
               {
                  "description": "The ID of the Story.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete Story"
         },
         "get": {
            "description": "Get Story returns information about a chosen Story.",
            "parameters": [
               {
                  "description": "The ID of the Story.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Story"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Story"
         },
         "put": {
            "description": "Update Story can be used to update Story properties.",
            "parameters": [
               {
                  "description": "The unique identifier of this story.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "UpdateStory",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateStory"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Story"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update Story"
         }
      },
      "/api/private/stories/{story-public-id}/comments": {
         "post": {
            "description": "Create Comment allows you to create a Comment on any Story.",
            "parameters": [
               {
                  "description": "The ID of the Story that the Comment is in.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateComment",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateComment"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Comment"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Comment"
         }
      },
      "/api/private/stories/{story-public-id}/comments/{comment-public-id}": {
         "delete": {
            "description": "Delete a Comment from any story.",
            "parameters": [
               {
                  "description": "The ID of the Story that the Comment is in.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "The ID of the Comment.",
                  "format": "int64",
                  "in": "path",
                  "name": "comment-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete Comment"
         },
         "get": {
            "description": "Get Comment is used to get Comment information.",
            "parameters": [
               {
                  "description": "The ID of the Story that the Comment is in.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "The ID of the Comment.",
                  "format": "int64",
                  "in": "path",
                  "name": "comment-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Comment"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Comment"
         },
         "put": {
            "description": "Update Comment replaces the text of the existing Comment.",
            "parameters": [
               {
                  "description": "The ID of the Story that the Comment is in.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "The ID of the Comment",
                  "format": "int64",
                  "in": "path",
                  "name": "comment-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "UpdateComment",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateComment"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Comment"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update Comment"
         }
      },
      "/api/private/stories/{story-public-id}/comments/{comment-public-id}/reactions": {
         "delete": {
            "description": "Delete a Reaction from any comment.",
            "parameters": [
               {
                  "description": "The ID of the Story that the Comment is in.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "The ID of the Comment.",
                  "format": "int64",
                  "in": "path",
                  "name": "comment-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateOrDeleteReaction",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateOrDeleteReaction"
                  }
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete Reaction"
         },
         "post": {
            "description": "Create a reaction to a comment.",
            "parameters": [
               {
                  "description": "The ID of the Story that the Comment is in.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "The ID of the Comment.",
                  "format": "int64",
                  "in": "path",
                  "name": "comment-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateOrDeleteReaction",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateOrDeleteReaction"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/Reaction"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Reaction"
         }
      },
      "/api/private/stories/{story-public-id}/tasks": {
         "post": {
            "description": "Create Task is used to create a new task in a Story.",
            "parameters": [
               {
                  "description": "The ID of the Story that the Task will be in.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateTask",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateTask"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Task"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Task"
         }
      },
      "/api/private/stories/{story-public-id}/tasks/{task-public-id}": {
         "delete": {
            "description": "Delete Task can be used to delete any previously created Task on a Story.",
            "parameters": [
               {
                  "description": "The unique ID of the Story this Task is associated with.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "The unique ID of the Task.",
                  "format": "int64",
                  "in": "path",
                  "name": "task-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete Task"
         },
         "get": {
            "description": "Returns information about a chosen Task.",
            "parameters": [
               {
                  "description": "The unique ID of the Story this Task is associated with.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "The unique ID of the Task.",
                  "format": "int64",
                  "in": "path",
                  "name": "task-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Task"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Task"
         },
         "put": {
            "description": "Update Task can be used to update Task properties.",
            "parameters": [
               {
                  "description": "The unique identifier of the parent Story.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "The unique identifier of the Task you wish to update.",
                  "format": "int64",
                  "in": "path",
                  "name": "task-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "UpdateTask",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateTask"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Task"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update Task"
         }
      },
      "/api/private/story-links": {
         "post": {
            "description": "Story Links (called Story Relationships in the UI) allow you create semantic relationships between two stories. The parameters read like an active voice grammatical sentence:  subject -> verb -> object.\n\nThe subject story acts on the object Story; the object story is the direct object of the sentence.\n\nThe subject story \"blocks\", \"duplicates\", or \"relates to\" the object story.  Examples:\n- \"story 5 blocks story 6” -- story 6 is now \"blocked\" until story 5 is moved to a Done workflow state.\n- \"story 2 duplicates story 1” -- Story 2 represents the same body of work as Story 1 (and should probably be archived).\n- \"story 7 relates to story 3”",
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateStoryLink",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateStoryLink"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/StoryLink"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Story Link"
         }
      },
      "/api/private/story-links/{story-link-public-id}": {
         "delete": {
            "description": "Delete Story Link can be used to delete any Story Link.",
            "parameters": [
               {
                  "description": "The unique ID of the Story Link.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-link-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete Story Link"
         },
         "get": {
            "description": "Returns information about the selected Story Link.",
            "parameters": [
               {
                  "description": "The unique ID of the Story Link.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-link-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/StoryLink"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Story Link"
         },
         "put": {
            "description": "Update the relationship for the Story Link.",
            "parameters": [
               {
                  "description": "The unique ID of the Story Link.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-link-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "UpdateStoryLink",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateStoryLink"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/StoryLink"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update Story Link"
         }
      },
      "/api/private/teams": {
         "get": {
            "description": "List Teams returns a list of all Teams in the organization.",
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/Team"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Teams"
         }
      },
      "/api/private/teams/{team-public-id}": {
         "get": {
            "description": "Get Team is used to get Team information.",
            "parameters": [
               {
                  "description": "The ID of the team.",
                  "format": "int64",
                  "in": "path",
                  "name": "team-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Team"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Team"
         }
      },
      "/api/private/workflows": {
         "get": {
            "description": "List Workflows returns a list of all Workflows in the organization.",
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/Workflow"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Workflows"
         }
      },
      "/api/v3/categories": {
         "get": {
            "description": "List Categories returns a list of all Categories and their attributes.",
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/Category"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Categories"
         },
         "post": {
            "description": "Create Category allows you to create a new Category in Clubhouse.",
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateCategory",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateCategory"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Category"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Category"
         }
      },
      "/api/v3/categories/{category-public-id}": {
         "delete": {
            "description": "Delete Category can be used to delete any Category.",
            "parameters": [
               {
                  "description": "The unique ID of the Category.",
                  "format": "int64",
                  "in": "path",
                  "name": "category-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete Category"
         },
         "get": {
            "description": "Get Category returns information about the selected Category.",
            "parameters": [
               {
                  "description": "The unique ID of the Category.",
                  "format": "int64",
                  "in": "path",
                  "name": "category-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Category"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Category"
         },
         "put": {
            "description": "Update Category allows you to replace a Category name with another name. If you try to name a Category something that already exists, you will receive a 422 response.",
            "parameters": [
               {
                  "description": "The unique ID of the Category you wish to update.",
                  "format": "int64",
                  "in": "path",
                  "name": "category-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "UpdateCategory",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateCategory"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Category"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update Category"
         }
      },
      "/api/v3/categories/{category-public-id}/milestones": {
         "get": {
            "description": "List Category Milestones returns a list of all Milestones with the Category.",
            "parameters": [
               {
                  "description": "The unique ID of the Category.",
                  "format": "int64",
                  "in": "path",
                  "name": "category-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/Milestone"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Category Milestones"
         }
      },
      "/api/v3/entity-templates": {
         "get": {
            "description": "List all the entity templates for an organization.",
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/EntityTemplate"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Entity Templates."
         },
         "post": {
            "description": "Create a new entity template for your organization.",
            "parameters": [
               {
                  "description": "Request paramaters for creating an entirely new entity template.",
                  "in": "body",
                  "name": "CreateEntityTemplate",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateEntityTemplate"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/EntityTemplate"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Entity Template"
         }
      },
      "/api/v3/entity-templates/disable": {
         "put": {
            "description": "Disables the Story Template feature for the given Organization.",
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Disable Story Templates"
         }
      },
      "/api/v3/entity-templates/enable": {
         "put": {
            "description": "Enables the Story Template feature for the given Organization.",
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Enable Story Templates"
         }
      },
      "/api/v3/entity-templates/{entity-template-public-id}": {
         "delete": {
            "description": null,
            "parameters": [
               {
                  "description": "The unique ID of the entity template.",
                  "format": "uuid",
                  "in": "path",
                  "name": "entity-template-public-id",
                  "required": true,
                  "type": "string"
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete Entity Template"
         },
         "get": {
            "description": "Get Entity Template returns information about a given entity template.",
            "parameters": [
               {
                  "description": "The unique ID of the entity template.",
                  "format": "uuid",
                  "in": "path",
                  "name": "entity-template-public-id",
                  "required": true,
                  "type": "string"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/EntityTemplate"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Entity Template"
         },
         "put": {
            "description": "Update an entity template's name or its contents.",
            "parameters": [
               {
                  "description": "The unique ID of the template to be updated.",
                  "format": "uuid",
                  "in": "path",
                  "name": "entity-template-public-id",
                  "required": true,
                  "type": "string"
               },
               {
                  "description": "Request parameters for changing either a template's name or any of\n  the attributes it is designed to pre-populate.",
                  "in": "body",
                  "name": "UpdateEntityTemplate",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateEntityTemplate"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/EntityTemplate"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update Entity Template"
         }
      },
      "/api/v3/epic-workflow": {
         "get": {
            "description": "Get Epic Workflow returns the Epic Workflow for the organization.",
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/EpicWorkflow"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Epic Workflow"
         }
      },
      "/api/v3/epics": {
         "get": {
            "description": "List Epics returns a list of all Epics and their attributes.",
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/EpicSlim"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Epics"
         },
         "post": {
            "description": "Create Epic allows you to create a new Epic in Clubhouse.",
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateEpic",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateEpic"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Epic"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Epic"
         }
      },
      "/api/v3/epics/{epic-public-id}": {
         "delete": {
            "description": "Delete Epic can be used to delete the Epic. The only required parameter is Epic ID.",
            "parameters": [
               {
                  "description": "The unique ID of the Epic.",
                  "format": "int64",
                  "in": "path",
                  "name": "epic-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete Epic"
         },
         "get": {
            "description": "Get Epic returns information about the selected Epic.",
            "parameters": [
               {
                  "description": "The unique ID of the Epic.",
                  "format": "int64",
                  "in": "path",
                  "name": "epic-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Epic"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Epic"
         },
         "put": {
            "description": "Update Epic can be used to update numerous fields in the Epic. The only required parameter is Epic ID, which can be found in the Clubhouse UI.",
            "parameters": [
               {
                  "description": "The unique ID of the Epic.",
                  "format": "int64",
                  "in": "path",
                  "name": "epic-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "UpdateEpic",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateEpic"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Epic"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update Epic"
         }
      },
      "/api/v3/epics/{epic-public-id}/comments": {
         "get": {
            "description": "Get a list of all Comments on an Epic.",
            "parameters": [
               {
                  "description": "The unique ID of the Epic.",
                  "format": "int64",
                  "in": "path",
                  "name": "epic-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/ThreadedComment"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Epic Comments"
         },
         "post": {
            "description": "This endpoint allows you to create a threaded Comment on an Epic.",
            "parameters": [
               {
                  "description": "The ID of the associated Epic.",
                  "format": "int64",
                  "in": "path",
                  "name": "epic-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateEpicComment",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateEpicComment"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/ThreadedComment"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Epic Comment"
         }
      },
      "/api/v3/epics/{epic-public-id}/comments/{comment-public-id}": {
         "delete": {
            "description": "This endpoint allows you to delete a Comment from an Epic.",
            "parameters": [
               {
                  "description": "The ID of the associated Epic.",
                  "format": "int64",
                  "in": "path",
                  "name": "epic-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "The ID of the Comment.",
                  "format": "int64",
                  "in": "path",
                  "name": "comment-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete Epic Comment"
         },
         "get": {
            "description": "This endpoint returns information about the selected Epic Comment.",
            "parameters": [
               {
                  "description": "The ID of the associated Epic.",
                  "format": "int64",
                  "in": "path",
                  "name": "epic-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "The ID of the Comment.",
                  "format": "int64",
                  "in": "path",
                  "name": "comment-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/ThreadedComment"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Epic Comment"
         },
         "post": {
            "description": "This endpoint allows you to create a nested Comment reply to an existing Epic Comment.",
            "parameters": [
               {
                  "description": "The ID of the associated Epic.",
                  "format": "int64",
                  "in": "path",
                  "name": "epic-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "The ID of the parent Epic Comment.",
                  "format": "int64",
                  "in": "path",
                  "name": "comment-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateCommentComment",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateCommentComment"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/ThreadedComment"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Epic Comment Comment"
         },
         "put": {
            "description": "This endpoint allows you to update a threaded Comment on an Epic.",
            "parameters": [
               {
                  "description": "The ID of the associated Epic.",
                  "format": "int64",
                  "in": "path",
                  "name": "epic-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "The ID of the Comment.",
                  "format": "int64",
                  "in": "path",
                  "name": "comment-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "UpdateComment",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateComment"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/ThreadedComment"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update Epic Comment"
         }
      },
      "/api/v3/files": {
         "get": {
            "description": "List Files returns a list of all Files and related attributes in your Clubhouse.",
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/File"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Files"
         },
         "post": {
            "description": null,
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateFiles",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateFiles"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/File"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Files"
         }
      },
      "/api/v3/files/{file-public-id}": {
         "delete": {
            "description": "Delete File can be used to delete any previously attached File.",
            "parameters": [
               {
                  "description": "The File’s unique ID.",
                  "format": "int64",
                  "in": "path",
                  "name": "file-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete File"
         },
         "get": {
            "description": "Get File returns information about the selected File.",
            "parameters": [
               {
                  "description": "The File’s unique ID.",
                  "format": "int64",
                  "in": "path",
                  "name": "file-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/File"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get File"
         },
         "put": {
            "description": "Update File can used to update the properties of a file uploaded to Clubhouse.",
            "parameters": [
               {
                  "description": "The unique ID assigned to the file in Clubhouse.",
                  "format": "int64",
                  "in": "path",
                  "name": "file-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "UpdateFile",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateFile"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/File"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update File"
         }
      },
      "/api/v3/groups": {
         "get": {
            "description": null,
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/Group"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Groups"
         },
         "post": {
            "description": null,
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateGroup",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateGroup"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Group"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Group"
         }
      },
      "/api/v3/groups/{group-public-id}": {
         "get": {
            "description": null,
            "parameters": [
               {
                  "description": "The unique ID of the Group.",
                  "format": "uuid",
                  "in": "path",
                  "name": "group-public-id",
                  "required": true,
                  "type": "string"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Group"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Group"
         },
         "put": {
            "description": null,
            "parameters": [
               {
                  "description": "The unique ID of the Group.",
                  "format": "uuid",
                  "in": "path",
                  "name": "group-public-id",
                  "required": true,
                  "type": "string"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "UpdateGroup",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateGroup"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Group"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update Group"
         }
      },
      "/api/v3/iterations": {
         "get": {
            "description": null,
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/IterationSlim"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Iterations"
         },
         "post": {
            "description": null,
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateIteration",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateIteration"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Iteration"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Iteration"
         }
      },
      "/api/v3/iterations/disable": {
         "put": {
            "description": "Disables Iterations for the current workspace",
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Disable Iterations"
         }
      },
      "/api/v3/iterations/enable": {
         "put": {
            "description": "Enables Iterations for the current workspace",
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Enable Iterations"
         }
      },
      "/api/v3/iterations/{iteration-public-id}": {
         "delete": {
            "description": null,
            "parameters": [
               {
                  "description": "The unique ID of the Iteration.",
                  "format": "int64",
                  "in": "path",
                  "name": "iteration-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete Iteration"
         },
         "get": {
            "description": null,
            "parameters": [
               {
                  "description": "The unique ID of the Iteration.",
                  "format": "int64",
                  "in": "path",
                  "name": "iteration-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Iteration"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Iteration"
         },
         "put": {
            "description": null,
            "parameters": [
               {
                  "description": "The unique ID of the Iteration.",
                  "format": "int64",
                  "in": "path",
                  "name": "iteration-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "UpdateIteration",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateIteration"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Iteration"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update Iteration"
         }
      },
      "/api/v3/labels": {
         "get": {
            "description": "List Labels returns a list of all Labels and their attributes.",
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "ListLabels",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/ListLabels"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/Label"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Labels"
         },
         "post": {
            "description": "Create Label allows you to create a new Label in Clubhouse.",
            "parameters": [
               {
                  "description": "Request parameters for creating a Label on a Clubhouse story.",
                  "in": "body",
                  "name": "CreateLabelParams",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateLabelParams"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Label"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Label"
         }
      },
      "/api/v3/labels/{label-public-id}": {
         "delete": {
            "description": "Delete Label can be used to delete any Label.",
            "parameters": [
               {
                  "description": "The unique ID of the Label.",
                  "format": "int64",
                  "in": "path",
                  "name": "label-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete Label"
         },
         "get": {
            "description": "Get Label returns information about the selected Label.",
            "parameters": [
               {
                  "description": "The unique ID of the Label.",
                  "format": "int64",
                  "in": "path",
                  "name": "label-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Label"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Label"
         },
         "put": {
            "description": "Update Label allows you to replace a Label name with another name. If you try to name a Label something that already exists, you will receive a 422 response.",
            "parameters": [
               {
                  "description": "The unique ID of the Label you wish to update.",
                  "format": "int64",
                  "in": "path",
                  "name": "label-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "UpdateLabel",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateLabel"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Label"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update Label"
         }
      },
      "/api/v3/labels/{label-public-id}/epics": {
         "get": {
            "description": "List all of the Epics with the Label.",
            "parameters": [
               {
                  "description": "The unique ID of the Label.",
                  "format": "int64",
                  "in": "path",
                  "name": "label-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/EpicSlim"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Label Epics"
         }
      },
      "/api/v3/linked-files": {
         "get": {
            "description": "List Linked Files returns a list of all Linked-Files and their attributes.",
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/LinkedFile"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Linked Files"
         },
         "post": {
            "description": "Create Linked File allows you to create a new Linked File in Clubhouse.",
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateLinkedFile",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateLinkedFile"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/LinkedFile"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Linked File"
         }
      },
      "/api/v3/linked-files/{linked-file-public-id}": {
         "delete": {
            "description": "Delete Linked File can be used to delete any previously attached Linked-File.",
            "parameters": [
               {
                  "description": "The unique identifier of the linked file.",
                  "format": "int64",
                  "in": "path",
                  "name": "linked-file-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete Linked File"
         },
         "get": {
            "description": "Get File returns information about the selected Linked File.",
            "parameters": [
               {
                  "description": "The unique identifier of the linked file.",
                  "format": "int64",
                  "in": "path",
                  "name": "linked-file-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/LinkedFile"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Linked File"
         },
         "put": {
            "description": "Updated Linked File allows you to update properties of a previously attached Linked-File.",
            "parameters": [
               {
                  "description": "The unique identifier of the linked file.",
                  "format": "int64",
                  "in": "path",
                  "name": "linked-file-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "UpdateLinkedFile",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateLinkedFile"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/LinkedFile"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update Linked File"
         }
      },
      "/api/v3/member": {
         "get": {
            "description": "Returns information about the authenticated member.",
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/MemberInfo"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Current Member Info"
         }
      },
      "/api/v3/members": {
         "get": {
            "description": "List Members returns information about members of the organization.",
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "ListMembers",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/ListMembers"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/Member"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Members"
         }
      },
      "/api/v3/members/{member-public-id}": {
         "get": {
            "description": "Returns information about a Member.",
            "parameters": [
               {
                  "description": "The Member's unique ID.",
                  "format": "uuid",
                  "in": "path",
                  "name": "member-public-id",
                  "required": true,
                  "type": "string"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "GetMember",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/GetMember"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Member"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Member"
         }
      },
      "/api/v3/milestones": {
         "get": {
            "description": "List Milestones returns a list of all Milestones and their attributes.",
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/Milestone"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Milestones"
         },
         "post": {
            "description": "Create Milestone allows you to create a new Milestone in Clubhouse.",
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateMilestone",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateMilestone"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Milestone"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Milestone"
         }
      },
      "/api/v3/milestones/{milestone-public-id}": {
         "delete": {
            "description": "Delete Milestone can be used to delete any Milestone.",
            "parameters": [
               {
                  "description": "The ID of the Milestone.",
                  "format": "int64",
                  "in": "path",
                  "name": "milestone-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete Milestone"
         },
         "get": {
            "description": "Get Milestone returns information about a chosen Milestone.",
            "parameters": [
               {
                  "description": "The ID of the Milestone.",
                  "format": "int64",
                  "in": "path",
                  "name": "milestone-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Milestone"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Milestone"
         },
         "put": {
            "description": "Update Milestone can be used to update Milestone properties.",
            "parameters": [
               {
                  "description": "The ID of the Milestone.",
                  "format": "int64",
                  "in": "path",
                  "name": "milestone-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "UpdateMilestone",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateMilestone"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Milestone"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update Milestone"
         }
      },
      "/api/v3/milestones/{milestone-public-id}/epics": {
         "get": {
            "description": "List all of the Epics within the Milestone.",
            "parameters": [
               {
                  "description": "The ID of the Milestone.",
                  "format": "int64",
                  "in": "path",
                  "name": "milestone-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/EpicSlim"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Milestone Epics"
         }
      },
      "/api/v3/projects": {
         "get": {
            "description": "List Projects returns a list of all Projects and their attributes.",
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/Project"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Projects"
         },
         "post": {
            "description": "Create Project is used to create a new Clubhouse Project.",
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateProject",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateProject"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Project"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Project"
         }
      },
      "/api/v3/projects/{project-public-id}": {
         "delete": {
            "description": "Delete Project can be used to delete a Project. Projects can only be deleted if all associated Stories are moved or deleted. In the case that the Project cannot be deleted, you will receive a 422 response.",
            "parameters": [
               {
                  "description": "The unique ID of the Project.",
                  "format": "int64",
                  "in": "path",
                  "name": "project-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete Project"
         },
         "get": {
            "description": "Get Project returns information about the selected Project.",
            "parameters": [
               {
                  "description": "The unique ID of the Project.",
                  "format": "int64",
                  "in": "path",
                  "name": "project-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Project"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Project"
         },
         "put": {
            "description": "Update Project can be used to change properties of a Project.",
            "parameters": [
               {
                  "description": "The unique ID of the Project.",
                  "format": "int64",
                  "in": "path",
                  "name": "project-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "UpdateProject",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateProject"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Project"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update Project"
         }
      },
      "/api/v3/projects/{project-public-id}/stories": {
         "get": {
            "description": "List Stories returns a list of all Stories in a selected Project and their attributes.",
            "parameters": [
               {
                  "description": "The unique ID of the Project.",
                  "format": "int64",
                  "in": "path",
                  "name": "project-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/StorySlim"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Stories"
         }
      },
      "/api/v3/repositories": {
         "get": {
            "description": "List Repositories returns a list of all Repositories and their attributes.",
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/Repository"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Repositories"
         }
      },
      "/api/v3/repositories/{repo-public-id}": {
         "get": {
            "description": "Get Repository returns information about the selected Repository.",
            "parameters": [
               {
                  "description": "The unique ID of the Repository.",
                  "format": "int64",
                  "in": "path",
                  "name": "repo-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Repository"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Repository"
         }
      },
      "/api/v3/search": {
         "get": {
            "description": "Search lets you search Epics and Stories based on desired parameters. Since ordering of the results can change over time (due to search ranking decay, new Epics and Stories being created), the `next` value from the previous response can be used as the path and query string for the next page to ensure stable ordering.",
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "Search",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/Search"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/SearchResults"
                  }
               },
               "400": {
                  "description": "**Either:** (1) Schema mismatch **or** (2) Maximum of 1000 search results exceeded ",
                  "schema": {
                     "$ref": "#/definitions/MaxSearchResultsExceededError"
                  }
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Search"
         }
      },
      "/api/v3/search/epics": {
         "get": {
            "description": "Search Epics lets you search Epics based on desired parameters. Since ordering of stories can change over time (due to search ranking decay, new Epics being created), the `next` value from the previous response can be used as the path and query string for the next page to ensure stable ordering.",
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "Search",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/Search"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/EpicSearchResults"
                  }
               },
               "400": {
                  "description": "**Either:** (1) Schema mismatch **or** (2) Maximum of 1000 search results exceeded ",
                  "schema": {
                     "$ref": "#/definitions/MaxSearchResultsExceededError"
                  }
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Search Epics"
         }
      },
      "/api/v3/search/stories": {
         "get": {
            "description": "Search Stories lets you search Stories based on desired parameters. Since ordering of stories can change over time (due to search ranking decay, new stories being created), the `next` value from the previous response can be used as the path and query string for the next page to ensure stable ordering.",
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "Search",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/Search"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/StorySearchResults"
                  }
               },
               "400": {
                  "description": "**Either:** (1) Schema mismatch **or** (2) Maximum of 1000 search results exceeded ",
                  "schema": {
                     "$ref": "#/definitions/MaxSearchResultsExceededError"
                  }
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Search Stories"
         }
      },
      "/api/v3/stories": {
         "post": {
            "description": "Create Story is used to add a new story to your Clubhouse.",
            "parameters": [
               {
                  "description": "Used to create multiple stories in a single request.",
                  "in": "body",
                  "name": "CreateStoryParams",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateStoryParams"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Story"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Story"
         }
      },
      "/api/v3/stories/bulk": {
         "delete": {
            "description": "Delete Multiple Stories allows you to delete multiple archived stories at once.",
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "DeleteStories",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/DeleteStories"
                  }
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete Multiple Stories"
         },
         "post": {
            "description": "Create Multiple Stories allows you to create multiple stories in a single request using the same syntax as [Create Story](https://clubhouse.io/api/#create-story).",
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateStories",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateStories"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/StorySlim"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Multiple Stories"
         },
         "put": {
            "description": "Update Multiple Stories allows you to make changes to numerous stories at once.",
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "UpdateStories",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateStories"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/StorySlim"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update Multiple Stories"
         }
      },
      "/api/v3/stories/search": {
         "post": {
            "description": "Search Stories lets you search Stories based on desired parameters.",
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "SearchStories",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/SearchStories"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/StorySlim"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Search Stories (Old)"
         }
      },
      "/api/v3/stories/{story-public-id}": {
         "delete": {
            "description": "Delete Story can be used to delete any Story.",
            "parameters": [
               {
                  "description": "The ID of the Story.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete Story"
         },
         "get": {
            "description": "Get Story returns information about a chosen Story.",
            "parameters": [
               {
                  "description": "The ID of the Story.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Story"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Story"
         },
         "put": {
            "description": "Update Story can be used to update Story properties.",
            "parameters": [
               {
                  "description": "The unique identifier of this story.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "UpdateStory",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateStory"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Story"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update Story"
         }
      },
      "/api/v3/stories/{story-public-id}/comments": {
         "post": {
            "description": "Create Comment allows you to create a Comment on any Story.",
            "parameters": [
               {
                  "description": "The ID of the Story that the Comment is in.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateComment",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateComment"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Comment"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Comment"
         }
      },
      "/api/v3/stories/{story-public-id}/comments/{comment-public-id}": {
         "delete": {
            "description": "Delete a Comment from any story.",
            "parameters": [
               {
                  "description": "The ID of the Story that the Comment is in.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "The ID of the Comment.",
                  "format": "int64",
                  "in": "path",
                  "name": "comment-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete Comment"
         },
         "get": {
            "description": "Get Comment is used to get Comment information.",
            "parameters": [
               {
                  "description": "The ID of the Story that the Comment is in.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "The ID of the Comment.",
                  "format": "int64",
                  "in": "path",
                  "name": "comment-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Comment"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Comment"
         },
         "put": {
            "description": "Update Comment replaces the text of the existing Comment.",
            "parameters": [
               {
                  "description": "The ID of the Story that the Comment is in.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "The ID of the Comment",
                  "format": "int64",
                  "in": "path",
                  "name": "comment-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "UpdateComment",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateComment"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Comment"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update Comment"
         }
      },
      "/api/v3/stories/{story-public-id}/comments/{comment-public-id}/reactions": {
         "delete": {
            "description": "Delete a Reaction from any comment.",
            "parameters": [
               {
                  "description": "The ID of the Story that the Comment is in.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "The ID of the Comment.",
                  "format": "int64",
                  "in": "path",
                  "name": "comment-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateOrDeleteReaction",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateOrDeleteReaction"
                  }
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete Reaction"
         },
         "post": {
            "description": "Create a reaction to a comment.",
            "parameters": [
               {
                  "description": "The ID of the Story that the Comment is in.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "The ID of the Comment.",
                  "format": "int64",
                  "in": "path",
                  "name": "comment-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateOrDeleteReaction",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateOrDeleteReaction"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/Reaction"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Reaction"
         }
      },
      "/api/v3/stories/{story-public-id}/tasks": {
         "post": {
            "description": "Create Task is used to create a new task in a Story.",
            "parameters": [
               {
                  "description": "The ID of the Story that the Task will be in.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateTask",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateTask"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Task"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Task"
         }
      },
      "/api/v3/stories/{story-public-id}/tasks/{task-public-id}": {
         "delete": {
            "description": "Delete Task can be used to delete any previously created Task on a Story.",
            "parameters": [
               {
                  "description": "The unique ID of the Story this Task is associated with.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "The unique ID of the Task.",
                  "format": "int64",
                  "in": "path",
                  "name": "task-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete Task"
         },
         "get": {
            "description": "Returns information about a chosen Task.",
            "parameters": [
               {
                  "description": "The unique ID of the Story this Task is associated with.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "The unique ID of the Task.",
                  "format": "int64",
                  "in": "path",
                  "name": "task-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Task"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Task"
         },
         "put": {
            "description": "Update Task can be used to update Task properties.",
            "parameters": [
               {
                  "description": "The unique identifier of the parent Story.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "The unique identifier of the Task you wish to update.",
                  "format": "int64",
                  "in": "path",
                  "name": "task-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "UpdateTask",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateTask"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Task"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update Task"
         }
      },
      "/api/v3/story-links": {
         "post": {
            "description": "Story Links (called Story Relationships in the UI) allow you create semantic relationships between two stories. The parameters read like an active voice grammatical sentence:  subject -> verb -> object.\n\nThe subject story acts on the object Story; the object story is the direct object of the sentence.\n\nThe subject story \"blocks\", \"duplicates\", or \"relates to\" the object story.  Examples:\n- \"story 5 blocks story 6” -- story 6 is now \"blocked\" until story 5 is moved to a Done workflow state.\n- \"story 2 duplicates story 1” -- Story 2 represents the same body of work as Story 1 (and should probably be archived).\n- \"story 7 relates to story 3”",
            "parameters": [
               {
                  "description": "",
                  "in": "body",
                  "name": "CreateStoryLink",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateStoryLink"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/StoryLink"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Create Story Link"
         }
      },
      "/api/v3/story-links/{story-link-public-id}": {
         "delete": {
            "description": "Delete Story Link can be used to delete any Story Link.",
            "parameters": [
               {
                  "description": "The unique ID of the Story Link.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-link-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "204": {
                  "description": "No Content"
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Delete Story Link"
         },
         "get": {
            "description": "Returns information about the selected Story Link.",
            "parameters": [
               {
                  "description": "The unique ID of the Story Link.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-link-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/StoryLink"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Story Link"
         },
         "put": {
            "description": "Update the relationship for the Story Link.",
            "parameters": [
               {
                  "description": "The unique ID of the Story Link.",
                  "format": "int64",
                  "in": "path",
                  "name": "story-link-public-id",
                  "required": true,
                  "type": "integer"
               },
               {
                  "description": "",
                  "in": "body",
                  "name": "UpdateStoryLink",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateStoryLink"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/StoryLink"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Update Story Link"
         }
      },
      "/api/v3/teams": {
         "get": {
            "description": "List Teams returns a list of all Teams in the organization.",
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/Team"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Teams"
         }
      },
      "/api/v3/teams/{team-public-id}": {
         "get": {
            "description": "Get Team is used to get Team information.",
            "parameters": [
               {
                  "description": "The ID of the team.",
                  "format": "int64",
                  "in": "path",
                  "name": "team-public-id",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "$ref": "#/definitions/Team"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "Get Team"
         }
      },
      "/api/v3/workflows": {
         "get": {
            "description": "List Workflows returns a list of all Workflows in the organization.",
            "responses": {
               "200": {
                  "description": "Resource",
                  "schema": {
                     "items": {
                        "$ref": "#/definitions/Workflow"
                     },
                     "type": "array"
                  }
               },
               "400": {
                  "description": "Schema mismatch"
               },
               "404": {
                  "description": "Resource does not exist"
               },
               "422": {
                  "description": "Unprocessable"
               }
            },
            "summary": "List Workflows"
         }
      }
   },
   "produces": [
      "application/json"
   ],
   "swagger": "2.0"
}